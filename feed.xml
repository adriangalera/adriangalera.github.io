<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.agalera.eu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.agalera.eu/" rel="alternate" type="text/html" /><updated>2022-09-06T21:21:06+02:00</updated><id>https://www.agalera.eu/feed.xml</id><title type="html">Adrian Galera blog</title><subtitle>My personal developer blog page</subtitle><entry><title type="html">Password protection for Github Pages</title><link href="https://www.agalera.eu/github-pages-password/" rel="alternate" type="text/html" title="Password protection for Github Pages" /><published>2022-09-06T00:00:00+02:00</published><updated>2022-09-06T00:00:00+02:00</updated><id>https://www.agalera.eu/github-pages-password</id><content type="html" xml:base="https://www.agalera.eu/github-pages-password/">In this article I implement a workaround to protect with password a static page stored in Github pages.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

I am using Github Pages to store static pages without any backend. That&apos;s super nice, but now I need to serve a password protected page. What kind I do?

I have found a guy that asked the same question and have a nice proposal: &lt;b&gt;use hashes&lt;/b&gt;. You can find his code here: &lt;a href=&quot;https://github.com/chrissy-dev/protected-github-pages&quot;&gt;https://github.com/chrissy-dev/protected-github-pages&lt;/a&gt;. His solution is older than walking.

## Hash to the rescue

The workaround is really simple, you choose a password that can be hard to guess. Hint: use some page that computes the password strength like: &lt;a href=&quot;https://www.idstrong.com/tools/password-strength-checker/&quot;&gt;https://www.idstrong.com/tools/password-strength-checker/&lt;/a&gt;.

With that word, you generate the sha1 hash:

```
echo -n &quot;&lt;your-word&gt;&quot; | openssl sha1
cb1dc474e185777dad218b7d60f2781723d8190b
```

Now generate a folder with that text in the root of the repo and place all the password protected content there.

Then in the root of the repository place an index.html that will have a password form. 

When the user enters the password, compute the sha1 hash of the field they just enter. Then, perform a redirection to the URL, if the answer is different than 200, the folder has not been found, so the password is invalid.

That&apos;s the code that does the magic:

```javascript
function login(secret) {
            var hash = sha1(secret)
            var url = hash + &quot;/index.html&quot;
            var alert = document.querySelectorAll(&apos;[data-id=&quot;alert&quot;]&apos;)

            var request = new XMLHttpRequest()
            request.open(&apos;GET&apos;, url, true)

            request.onload = function () {
                if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {
                    window.location = url
                } else {
                    parent.location.hash = hash
                    alert[0].style.display = &apos;block&apos;
                    password[0].setAttribute(&apos;placeholder&apos;, &apos;Incorrect password&apos;)
                    password[0].value = &apos;&apos;
                }
            }
            request.onerror = function () {
                parent.location.hash = hash
                alert[0].style.display = &apos;block&apos;
                password[0].setAttribute(&apos;placeholder&apos;, &apos;Incorrect password&apos;)
                password[0].value = &apos;&apos;
            }
            request.send()
        }

button[0].addEventListener(&quot;click&quot;, function () {
    login(password[0].value)
})
```
That works really nice, however, once the authentication is passed, a user can share the link and the authentication will be bypassed. We need an extra layer of security

## Avoid sharing the link

You can make a very easy implementation to make short-lived links. The page that provides the autentication can add a `not-valid-after` parameter to the URL. For example:

```javascript
request.onload = function () {
        if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {
            let nva = new Date().getTime() + 1_000
            window.location = url + &quot;?nva=&quot;+nva
...
```
With this piece of code, the links are only valid for 1 second.

In the index.html of the protected content, we only need to check for the `not-valid-after` parameter:

```javascript
let paramString = window.location.search.split(&apos;?&apos;)[1];
let queryString = new URLSearchParams(paramString);
let nva = parseInt(queryString.get(&quot;nva&quot;))
let now = new Date().getTime()
if (Number.isNaN(nva) || now &gt; nva) {
    console.log(&quot;not-valid-after invalid, going to redirect to /&quot;)
    window.location = &quot;/&quot;
}
```
This piece of the code reads the `nva` parameter from the URL and checks if it&apos;s not present or if it&apos;s too late. In any of those cases, it redirects to the root; where the password form appears.</content><author><name></name></author><category term="javascript" /><category term="browser" /><category term="github-pages" /><category term="security" /><category term="javascript" /><category term="browser" /><category term="github-pages" /><category term="security" /><summary type="html">In this article I implement a workaround to protect with password a static page stored in Github pages.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/github-password/featured.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/github-password/featured.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Browser storage</title><link href="https://www.agalera.eu/browser-storage/" rel="alternate" type="text/html" title="Browser storage" /><published>2022-07-23T00:00:00+02:00</published><updated>2022-07-23T00:00:00+02:00</updated><id>https://www.agalera.eu/browser-storage</id><content type="html" xml:base="https://www.agalera.eu/browser-storage/">In this article I discuss some techniques to store data in the browser. This way the web applications do not require a expensive backend, every customer stores its information in the browser.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

This is part of my series of articles about leaflet:

- &lt;a href=&quot;/leaflet-fog-of-war&quot;&gt;Leaflet fog of war&lt;/a&gt;
- &lt;a href=&quot;/leaflet-draw-polygon-markers&quot;&gt;Draw a polygon from markers in leaflet&lt;/a&gt;
- &lt;a href=&quot;/leaflet-load-gpx&quot;&gt;Load and display GPX in leaflet&lt;/a&gt;
- &lt;a href=&quot;/browser-storage&quot;&gt;Browser storage&lt;/a&gt;

For the implementation of fog of war map, I do not want to spend any time dealing with the backend. Besides that, I don&apos;t want to spent not even a cent on the storage of data.

In this scenario, the visited areas are stored into a huge GeoJSON document. The persistence should store that document so the user does not need to re-create it every time.

However, how the can the data be persisted without any backend? It turns out the browser offers some persistence capabilities, let&apos;s analyse them.

## Local storage

The first approach is to use browser&apos;s local storage. This storage is a key-value storage which has a very simple synchronous contract:

```javascript
window.localStorage.setItem(&quot;a&quot;,&quot;b&quot;)
window.localStorage
&gt; StorageÂ {a: &apos;b&apos;, length: 1}
window.localStorage.getItem(&quot;a&quot;)
&gt; &apos;b&apos;
```

This storage is really simple and easy to use, however it comes at the cost of have a very limited space in the order of few MBs.

The original approach was to use this type of storage, however I reached the size limit really fast when I started to import GPX files.

## Caches

Reading a little bit more on browser storage capabilities, I discovered the caching mechanism. This is designed to store the answers from HTTP calls, hence its name. However, its original purpose can be violated to store any kind of data, not only HTTP responses.

This new API is asynchronous, that make the transition from local storage to caches a little bit painful, but it&apos;s a price we have to pay for having a massive amount of storage capability. According to &lt;a href=&quot;https://web.dev/cache-api-quick-guide/&quot;&gt;this article&lt;/a&gt; the storage availability is based on the amount of storage available on the disk.

```javascript
function GeoJsonStorage() {
    const CACHE_NAME = &quot;geojson&quot;
    const CACHE_KEY = &quot;https://xxxx/geojson.json&quot;
    return {
        set: function (geojson) {
            caches.open(CACHE_NAME)
                .then(function (cache) {
                    cache.put(CACHE_KEY, new Response(JSON.stringify(geojson)));
                })
                .catch(err =&gt; console.log(`Cannot open the cache, error: ${err}`))
        },

        get: async function () {
            return caches.open(CACHE_NAME)
                .then(cache =&gt; cache.match(CACHE_KEY))
                .then(response =&gt; {
                    if (response)
                        return response.json()
                    return undefined
                })
                .catch(err =&gt; console.log(`Cannot get the contents from the cache, error: ${err}`))
        },
        clear: function () {
            caches.delete(CACHE_NAME)
        }
    }
}
```
The key to store arbitrary data into the caches mechanism is to trick the system saying that the cache key is an HTTP request: `https://xxxx/geojson.json`. This way, you can put and retrieve a JSON inside the caching mechanism</content><author><name></name></author><category term="javascript" /><category term="browser" /><category term="persistence" /><category term="javascript" /><category term="browser" /><category term="persistence" /><summary type="html">In this article I discuss some techniques to store data in the browser. This way the web applications do not require a expensive backend, every customer stores its information in the browser.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/browser-storage/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/browser-storage/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Load GPX in leaflet</title><link href="https://www.agalera.eu/leaflet-load-gpx/" rel="alternate" type="text/html" title="Load GPX in leaflet" /><published>2022-07-22T00:00:00+02:00</published><updated>2022-07-22T00:00:00+02:00</updated><id>https://www.agalera.eu/leaflet-load-gpx</id><content type="html" xml:base="https://www.agalera.eu/leaflet-load-gpx/">&lt;style type=&quot;text/css&quot;&gt;
.image-table td{
    border: 0px;
}
.image-table .center{
    text-align: center;
}
&lt;/style&gt;
Following up from the previous article about implementing the fog of war in leaflet, I want to be able to load a GPX file and display it in the map.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

This is part of my series of articles about leaflet:

- &lt;a href=&quot;/leaflet-fog-of-war&quot;&gt;Leaflet fog of war&lt;/a&gt;
- &lt;a href=&quot;/leaflet-draw-polygon-markers&quot;&gt;Draw a polygon from markers in leaflet&lt;/a&gt;
- &lt;a href=&quot;/leaflet-load-gpx&quot;&gt;Load and display GPX in leaflet&lt;/a&gt;
- &lt;a href=&quot;/browser-storage&quot;&gt;Browser storage&lt;/a&gt;

Now, that I can draw paths with some distance in the map, I want to be able to load &lt;a href=&quot;https://en.wikipedia.org/wiki/GPS_Exchange_Format&quot;&gt;GPX files&lt;/a&gt;. Those files store geographical information in the way of latitude,longitude and optionally elevation, time and other information. Those documents are XML based, so it should be easy to parse.

## Load file

How to load any file from the computer from the browser? `window.showOpenFilePicker` allows the browser to opens a file picker. That file picker can be customised to load files of only one type, to allow multiple files, etc. Take into account that is an async operation, so you&apos;ll have to deal with promises:

```javascript
const gpxPickerOpts = {
    types: [
        {
            description: &apos;GPX Files&apos;,
            accept: {
                &apos;application/gpx+xml&apos;: [&apos;.gpx&apos;]
            }
        }
    ],
    multiple: true
};
const fileHandlers = await window.showOpenFilePicker(gpxPickerOpts);
for (let fh of fileHandlers) {
    const file = await fh.getFile();
    const content = await file.text();
}
```
In this case, we want to load multiple GPX files. The `window.showOpenFilePicker` methods returns an array of file handlers which later we need to open and consume. `file.text()` operation returns the full contents of the file in text.

## Parse the GPX

Now that we have the text contents of the file, we must extract the relevant information, i.e. latitude and longitude of the points stored. Since GPX is XML-based, we can use two approaches to parse the file:

- SAX: Simple API for XML. Event based, when a new node is detected, an event is generated and passed to the event handler. Extremely efficient but complicated to implement.
- DOM: Document Object Mapper. It parses the file in one go. If the documents are big can lead to performance decrease, but it&apos;s extremely easy to implement.

Since this is a toy project, let&apos;s use DOM because of its simplicity:

```javascript
const _xmlTrackPointToLatLng = (trkpoint) =&gt; {
    return [parseFloat(trkpoint.attributes.lat.nodeValue), parseFloat(trkpoint.attributes.lon.nodeValue)]
}
var gpxDom = (new DOMParser()).parseFromString(content, &apos;text/xml&apos;);
const trackPoints = Array.from(gpxDoc.getElementsByTagName(&quot;trkpt&quot;));
const latlngs = trackPoints.map((trkpnt) =&gt; container._xmlTrackPointToLatLng(trkpnt))
```

This snippet generated the DOM from the contents of the GPX file. Later extract the elements in the DOM tree that belongs to points in the track: `&lt;trkpt&gt;`. Then, every tag is processed to extract latitude and longitude.

In this point, we have an array of points with latitude/longitude pairs.

## Display the GPX

GPX can have a massive amounts of points, I have some of them with 20k points. In order to display it smoothly, I&apos;m grouping the points in groups of 200 to draw the polygon like in the previous article (&lt;a href=&quot;/leaflet-draw-polygon-markers&quot;&gt;Draw a polygon from markers in leaflet&lt;/a&gt;):

```javascript
const  _group = (arr, n) =&gt; {
    const res = [];
    let limit = 0;
    while (limit + n &lt;= arr.length) {
        res.push(arr.slice(limit, n + limit));
        limit += n
    }
    return res
}
const groups = container._group(latlngs, 200)
var polygonGeoJSON = undefined
for (let group of groups) {
    const polLatLng = _joinLinesInPolygon(group) //from previous article
    const pol = L.polygon(polLatLng).toGeoJSON()
    if (!polygonGeoJSON) {
        polygonGeoJSON = pol
    } else {
        polygonGeoJSON = turf.union(pol, polygonGeoJSON)
    }
}
```

This `_group` function creates batches of 200 points in order to perform the joinin of those points into a polygon. Once a polygon is created, I&apos;m merging them with the &lt;a href=&quot;https://turfjs.org/docs/#union&quot;&gt;turf library&lt;/a&gt; by performing a union.

This way of displaying GPX files produces very appealing representation such as:

&lt;img src=&quot;/assets/img/posts/leaflet-load-gpx/gpx.png&quot; alt=&quot;GPX representation in leaflet map&quot;/&gt;

Here you can see it in action: &lt;a href=&quot;https://www.agalera.eu/leaflet-fogofwar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.agalera.eu/leaflet-fogofwar/&lt;/a&gt;</content><author><name></name></author><category term="leaflet" /><category term="javascript" /><category term="browser" /><category term="gis" /><category term="gpx" /><category term="leaflet" /><category term="javascript" /><category term="browser" /><category term="gis" /><category term="gpx" /><summary type="html">Following up from the previous article about implementing the fog of war in leaflet, I want to be able to load a GPX file and display it in the map.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/leaflet-load-gpx/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/leaflet-load-gpx/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Draw a polygon from markers in leaflet</title><link href="https://www.agalera.eu/leaflet-draw-polygon-markers/" rel="alternate" type="text/html" title="Draw a polygon from markers in leaflet" /><published>2022-07-21T00:00:00+02:00</published><updated>2022-07-21T00:00:00+02:00</updated><id>https://www.agalera.eu/leaflet-draw-polygon-markers</id><content type="html" xml:base="https://www.agalera.eu/leaflet-draw-polygon-markers/">&lt;style type=&quot;text/css&quot;&gt;
.image-table td{
    border: 0px;
}
.image-table .center{
    text-align: center;
}
&lt;/style&gt;
Following up from the previous article about implementing the fog of war in leaflet, I want to add some markers to the map and to create a polygon that joins them.

Let&apos;s see how I manage to do that.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

This is part of my series of articles about leaflet:

- &lt;a href=&quot;/leaflet-fog-of-war&quot;&gt;Leaflet fog of war&lt;/a&gt;
- &lt;a href=&quot;/leaflet-draw-polygon-markers&quot;&gt;Draw a polygon from markers in leaflet&lt;/a&gt;
- &lt;a href=&quot;/leaflet-load-gpx&quot;&gt;Load and display GPX in leaflet&lt;/a&gt;
- &lt;a href=&quot;/browser-storage&quot;&gt;Browser storage&lt;/a&gt;

The user can click the map to generate markers that follow a route, e.g. a road, a trail, etc.. and later join those markers to create a complex polygon. This reflects the fact that you have visited the road, but you only have certain visibility of the environment (maybe 10 meters or so):

&lt;table class=&quot;image-table&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img src=&quot;/assets/img/posts/draw-polygon-markers/1.png&quot; alt=&quot;Markers&quot;/&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;img src=&quot;/assets/img/posts/draw-polygon-markers/2.png&quot; alt=&quot;Joined markers into a polygon&quot;/&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;
&lt;small&gt;Markers&lt;/small&gt;
&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;
&lt;small&gt;Joined markers into a polygon&lt;/small&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

## Join markers into a polygon

When a new marker is added, it is added to the map and to an internal array:
```javascript
        onAdd: function (e) {
            const marker = new L.Marker(e.latlng)
            container.markers.push(marker.addTo(map))
        }
```
When the user click on a button, those markers are processed and joined into a polygon by using the &lt;a href=&quot;https://github.com/bjornharrtell/jsts&quot;&gt;jsts&lt;/a&gt; library

```javascript
const _joinLinesInPolygon = (points) =&gt; {
    const pointToGeomCoordinate = (p) =&gt; {
        if (p.lat &amp;&amp; p.lng)
            return new jsts.geom.Coordinate(p.lat, p.lng)
        return new jsts.geom.Coordinate(p[0], p[1])
    }

    const toLeafletPoint = (p) =&gt; {
        return [p.x, p.y]
    }

    const meters = 40 //the user can selected the width of the generated polygon
    const distance = (meters * 0.0001) / 111.12; //Geometry aproximations
    const geometryFactory = new jsts.geom.GeometryFactory();
    const pathCoords = points.map((p) =&gt; pointToGeomCoordinate(p));
    const shell = geometryFactory.createLineString(pathCoords);
    const polygon = shell.buffer(distance);
    const polygonCoords = polygon.getCoordinates();
    return polygonCoords.map((coord) =&gt; toLeafletPoint(coord))
}
```
This method converts the leaflet points into a format the jsts libray can understand and perform the `buffer` operation in jsts which does all the magic. From the API definition: buffer computes a buffer area around this geometry having the given width.

Later the coordinates are transformed into the leaflet format.

Here you can see it in action: &lt;a href=&quot;https://www.agalera.eu/leaflet-fogofwar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.agalera.eu/leaflet-fogofwar/&lt;/a&gt;</content><author><name></name></author><category term="leaflet" /><category term="javascript" /><category term="browser" /><category term="gis" /><category term="leaflet" /><category term="javascript" /><category term="browser" /><category term="gis" /><summary type="html">Following up from the previous article about implementing the fog of war in leaflet, I want to add some markers to the map and to create a polygon that joins them. Letâs see how I manage to do that.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/draw-polygon-markers/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/draw-polygon-markers/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Leaflet fog of war</title><link href="https://www.agalera.eu/leaflet-fog-of-war/" rel="alternate" type="text/html" title="Leaflet fog of war" /><published>2022-07-20T00:00:00+02:00</published><updated>2022-07-20T00:00:00+02:00</updated><id>https://www.agalera.eu/leaflet-fog-of-war</id><content type="html" xml:base="https://www.agalera.eu/leaflet-fog-of-war/">&lt;style&gt;
iframe {
    padding: 0;
    border-width: 0;
    width: 60%;
    height: 400px
}

.iframe-holder {
    display: flex;
    align-items: center;
    justify-content: center;
    padding-bottom: 5px;
}
&lt;/style&gt;

When I was playing age of empires the map was all in black color at the beginning. As long as you explore the map, the black color is removed discovering what it was hidden behind.

I wanted to implement something similar to show all the trails, routes, paths, roads, streets, etc that I have discovered. I&apos;ll describe the callenges I have found in a series of articles.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

This is part of my series of articles about leaflet:

- &lt;a href=&quot;/leaflet-fog-of-war&quot;&gt;Leaflet fog of war&lt;/a&gt;
- &lt;a href=&quot;/leaflet-draw-polygon-markers&quot;&gt;Draw a polygon from markers in leaflet&lt;/a&gt;
- &lt;a href=&quot;/leaflet-load-gpx&quot;&gt;Load and display GPX in leaflet&lt;/a&gt;
- &lt;a href=&quot;/browser-storage&quot;&gt;Browser storage&lt;/a&gt;

Age of empires... what a great game

&lt;img src=&quot;/assets/img/posts/leaflet-fog-of-war/age-of-empires.jpeg&quot; alt=&quot;Age of Empires map&quot;/&gt;

I want to create something similar to the map in Age of Empires. A map where everything is hidden until you discovered. This way you could check how much of your city you know, or where to search for new places to visit.

I have worked many times before with &lt;a href=&quot;https://leafletjs.com/&quot;&gt;leaflet js&lt;/a&gt;, a nice library to display maps and geographic information. It has a nice ecosystem of plugins, so I&apos;ve checked if someone has something similar implemented and YES!

&lt;a href=&quot;https://github.com/ptma/Leaflet.Mask&quot;&gt;Leaflet.Mask&lt;/a&gt; already implemented a plugin that mask all the map and displays the area specified in the begining.

&lt;div class=&quot;iframe-holder&quot;&gt;
&lt;iframe src=&quot;https://ptma.github.io/Leaflet.Mask/examples/mask.html&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

However, it does not fit my requirements as I want to add places dynamically. So, let&apos;s implement our own thing ...

## Implementing my own Leaflet Mask

Taking &lt;a href=&quot;https://github.com/ptma/Leaflet.Mask&quot;&gt;Leaflet.Mask&lt;/a&gt; as a base, I will modify it a bit in order to be able to add the visited area dynamically.

The key for this to succeed was to understand how the polygon has to be created in leaflet:

```javascript
scotland = L.polygon([
  [
    [60, -13],
    [60, 0],
    [50, 4],
    [50, -13],
  ],
  [
    [55.7, -4.5],
    [56, -4.5],
    [56, -4],
    [55.7, -4],
  ],
]);
scotland.addTo(map);
```

&lt;img src=&quot;/assets/img/posts/leaflet-fog-of-war/holes.png&quot; alt=&quot;Polygon with holes&quot;/&gt;

In order to draw the polygon, the user might pass the list of latitude longitudes and a second optional argument that defines the holes of that polygon.

Finally the code looked something similar to:

```javascript
 _setMaskLayer: function () {
            if (this.masklayer) {
                this.removeLayer(this.masklayer)
            }

            var allWorld = this._coordsToLatLngs(this._allWorldCoordinates)
            var latlngs = [allWorld]

            this._holes.forEach((hole) =&gt; latlngs.push(this._coordsToLatLngs(hole)))

            var layer = new L.Polygon(latlngs, this.options);
            this.masklayer = layer
            this.addLayer(layer);
        },
```

The plugin reads the input data as &lt;a href=&quot;https://en.wikipedia.org/wiki/GeoJSON&quot;&gt;GeoJSON&lt;/a&gt; and store the visited places latitude and longitude in the `this._holes` variable. Later on, this array is iterated in order to build the holes that leaflet will draw into the polygon. Finally the created polygon is added to the map. When the method is called, the polygon is removed to be able to redraw it.

Here you can see it in action: &lt;a href=&quot;https://www.agalera.eu/leaflet-fogofwar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.agalera.eu/leaflet-fogofwar/&lt;/a&gt;

But wait ... that&apos;s not all, I want the fulfill the following requirements:
- I need a way to draw the areas I visisted, covered in the article: &lt;a href=&quot;/leaflet-draw-polygon-markers/&quot;&gt;Draw a polygon from markers in leaflet&lt;/a&gt;
- Load a GPX and display it in the map, covered in the article: &lt;a href=&quot;/leaflet-draw-polygon-markers/&quot;&gt;Load and display GPX in leaflet&lt;/a&gt;
- I don&apos;t want to spent any money in this, so the storage will be browser based. This is covered in the article: &lt;a href=&quot;/browser-storage&quot;&gt;Browser storage&lt;/a&gt;</content><author><name></name></author><category term="leaflet" /><category term="javascript" /><category term="browser" /><category term="gis" /><category term="leaflet" /><category term="javascript" /><category term="browser" /><category term="gis" /><summary type="html">When I was playing age of empires the map was all in black color at the beginning. As long as you explore the map, the black color is removed discovering what it was hidden behind. I wanted to implement something similar to show all the trails, routes, paths, roads, streets, etc that I have discovered. Iâll describe the callenges I have found in a series of articles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/leaflet-fog-of-war/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/leaflet-fog-of-war/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Combine two Java Optionals</title><link href="https://www.agalera.eu/combine-two-optionals/" rel="alternate" type="text/html" title="Combine two Java Optionals" /><published>2022-06-03T00:00:00+02:00</published><updated>2022-06-03T00:00:00+02:00</updated><id>https://www.agalera.eu/combine-two-optionals</id><content type="html" xml:base="https://www.agalera.eu/combine-two-optionals/">I was implementing a searching algorithm and I had to search for two things. In this article I describe how I implemented combining two Java optionals.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

The algorithm had to do something similar to:

1. Search inside an array the first item starting by A
2. If none is found, search the first item starting by B
3. If none is found, throw an Exception

Common code:

```java
public abstract class ItemFinder {

    protected abstract String findItem(List&lt;String&gt; items);

    protected Optional&lt;String&gt; findFirstItemStartingWithA(List&lt;String&gt; items) {
        return findFirstItemStartingWith(&quot;A&quot;, items);
    }

    protected Optional&lt;String&gt; findFirstItemStartingWithB(List&lt;String&gt; items) {
        return findFirstItemStartingWith(&quot;B&quot;, items);
    }

    private Optional&lt;String&gt; findFirstItemStartingWith(String letter, List&lt;String&gt; items) {
        return items.stream()
            .filter(item -&gt; item.startsWith(letter))
            .findFirst();
    }
}
```

## Java 8

The only way to achieve this with Optionals before Java 9 was to cascade the Optional call:

```java
     public String findItem(List&lt;String&gt; items) {
        return findFirstItemStartingWithA(items)
            .orElseGet(() -&gt; findFirstItemStartingWithB(items)
                .orElseThrow(() -&gt; new RuntimeException(&quot;no item found&quot;)));
    }
```

The alternative flow is cascaded in the `orElseGet`, which is a little bit hard to read

## Java &gt; 9

In Java 9, the `Optional.or` method is introduced, which enhaces a lot the code for these scenarios. The code above can be rewritten in a much more understandable fashion:

```java
    public String findItem(List&lt;String&gt; items) {
        return findFirstItemStartingWithA(items)
            .or(() -&gt; findFirstItemStartingWithB(items))
            .orElseThrow(() -&gt; new RuntimeException(&quot;no item found&quot;));
    }
```</content><author><name></name></author><category term="java9" /><category term="optional" /><category term="java9" /><category term="optional" /><summary type="html">I was implementing a searching algorithm and I had to search for two things. In this article I describe how I implemented combining two Java optionals.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/combine-optional/featured-image.jpeg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/combine-optional/featured-image.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Golang abstract class</title><link href="https://www.agalera.eu/golang-abstract-class/" rel="alternate" type="text/html" title="Golang abstract class" /><published>2021-09-24T00:00:00+02:00</published><updated>2021-09-24T00:00:00+02:00</updated><id>https://www.agalera.eu/golang-abstract-class</id><content type="html" xml:base="https://www.agalera.eu/golang-abstract-class/">I&apos;m doing a side project using golang, and I have a use case where I&apos;d use an abstract class in Java.  Unfortunately, in golang the concept of classes does not exist.

In this article I describe how can I implement the behaviour I want without abstract class.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

I&apos;m implementing an alert system in golang. When the alert needs to be activated, I want to play a sound through speakers and blink some LEDs for some period of time.

The behavior is quite simple, it needs to provide an implementation to enable the signaler, disable and query.

We will create two clases, one for playing sounds and another one for blinking the LEDs. And an abstract class to implement the shutdown after some period of time. Something similar to:

```java
abstract class Signaler {
    public void enableForTime(int seconds) {
        //Implementation to enable the signaler for x seconds
    }
    public void disable() {
        //Disable the signalers and cancel any pending timer
    }
    abstract void enable();
    abstract void disableSignaler();
}
class LedSignaler extends Signaler {
    @Override
    void enable() {
        //enable the LEDs
    }
    @Override
    void disableSignaler() {
        //disable the LEDs
    }
}
class SoundSignaler extends Signaler {
    @Override
    void enable() {
        //enable the speaker
    }
    @Override
    void disableSignaler() {
        //disable the speaker
    }
}
```

The idea of this is to abstract the concrete implementation to the caller of the signaler. 

This representation will work in any language that supports inheritance and abstract classes.

## Decorator pattern

In golang, the concept of classes does not exist. So, we need to re-architecture the pattern. 

Instead of using the abstract class, we can re-think the implementation to use a decorator pattern: &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;https://en.wikipedia.org/wiki/Decorator_pattern&lt;/a&gt;.

&gt; The decorator pattern is a design pattern that allows behavior to be added to an individual object, dynamically, without affecting the behavior of other objects from the same class

It works by defining an interface that will have multiple implementation, we can add new functionalities by adding new implementations. Let&apos;s go define the interface of the signaler:

```golang
type Signaler interface {
	Enable()
	IsEnabled() bool
	Disable()
}
```
Now, we can do the implementation of the sound signaler. To implement and interface in golang you need to provide a struct that has the same methods as the interface.

```golang
type soundSignaler struct {
    
}
func (s *soundSignaler) Enable() {
	s.enabled = true
    //start playing sound
}

func (s *soundSignaler) Disable() {
	s.enabled = false
    //stop playing sound
}

func (s *soundSignaler) IsEnabled() bool {
	return s.enabled
}
```
OK, now let&apos;s do the implementation of the temporal execution of the signaler. In order to do so, let&apos;s create a new type that implement `Signaler`:

```golang
type temporalSignaler struct {
	config          *config.AlarmConfig
	timers          []signalerTimer
	delayedExecutor delayedExecutor
	signaler        Signaler
}

func (s *temporalSignaler) Enable() {
	s.signaler.Enable()
	var t = s.delayedExecutor.executeAfterSeconds(s.config.SecondsStopSignals, func() {
		s.Disable()
	})
	s.timers = append(s.timers, t)
}

func (s *temporalSignaler) Disable() {
	for i := 0; i &lt; len(s.timers); i++ {
		s.timers[i].Stop()
	}
	s.signaler.Disable()
}

func (s *temporalSignaler) IsEnabled() bool {
	return s.signaler.IsEnabled()
}
```
The key point of this struct, is that we&apos;re holding a `Signaler` instance on it. We are &quot;decorating&quot; that instance with the temporal disabling functionality. In order to do so, we just need to implement the logic in the type and call the `Signaler` methods of the decorated instance.

The most elegant part of this implementation is that we&apos;re defining all the structs as private (name begins with lower case). So, the external modules cannot instantiate them. We can abstract the creation of the sound signaler by creating a factory:

```golang
func NewSoundSignaler(config *config.Config) Signaler {
	return &amp;temporalSignaler{
		delayedExecutor: &amp;defaultDelayedExecutor{},
		config:          &amp;config.Alarm,
		signaler: &amp;soundSignaler{
			config:   config,
			executor: &amp;unixCommandExecutor{},
		},
	}
}
```

External modules can call the factory method, and they will receive a `Signaler` instance, hiding effectively the implementation details of the temporal execution and sound playback.</content><author><name></name></author><category term="golang" /><category term="design-patterns" /><category term="architecture" /><category term="golang" /><category term="design-patterns" /><category term="architecture" /><summary type="html">Iâm doing a side project using golang, and I have a use case where Iâd use an abstract class in Java. Unfortunately, in golang the concept of classes does not exist. In this article I describe how can I implement the behaviour I want without abstract class.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/golang-abstract/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/golang-abstract/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Implementing a dog bark detector</title><link href="https://www.agalera.eu/bark-detector/" rel="alternate" type="text/html" title="Implementing a dog bark detector" /><published>2021-07-18T00:00:00+02:00</published><updated>2021-07-18T00:00:00+02:00</updated><id>https://www.agalera.eu/bark-detector</id><content type="html" xml:base="https://www.agalera.eu/bark-detector/">&lt;style type=&quot;text/css&quot;&gt;
.image-table td{
    border: 0px;
}
.image-table .center{
    text-align: center;
}
&lt;/style&gt;

&lt;p&gt;My dog has a little bit of separation anxiety so when we leave him alone, he barks some times.&lt;/p&gt;

&lt;p&gt;We are training him to be home-alone and we want to know if he barks or not when we are not home.&lt;/p&gt;

&lt;p&gt;Let&apos;s implement a bark detector!&lt;/p&gt;

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

## Basics

### Time representation

What is audio and how is its digital representation? It&apos;s basically an array of float values containing a value from -1 to 1.

&lt;table class=&quot;image-table&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img src=&quot;/assets/img/posts/bark-detector/wave.png&quot; alt=&quot;Sound wave&quot;/&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;
&lt;small&gt;Temporal representation of an audio signal&lt;/small&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

This representation shows the temporal evolution of the audio signal over time. This is very variable and it&apos;s really difficult to extract any relevant feature from this representation.

### Frequency representation

So, instead of using the temporal representation, let&apos;s observe the frequency representation:

&lt;table class=&quot;image-table&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img src=&quot;/assets/img/posts/bark-detector/stft.png&quot; alt=&quot;Frequency representation&quot;/&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;
&lt;small&gt;Frequency representation of an audio signal&lt;/small&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

The x axis is the time of the audio signal and the y axis is the values of the frequencies. Each color in the vertical axis correspond to a different value of the power on that certain frequency.

Note that the time of the plot is doubled respect with the time representation, this is because the signal is combined with itself to generate the frequency representation.

This representation shows the evolution of the different frequency amplitudes over time.

Without even listening the sound, we can try to analise it checking the time/frequency characteristic. We see some peaks in the time representation that match with high energy in the low frequencies.

The good thing about frequency representation is that it cancel noise because usually its energy is spread over all frequencies. Besides that, each sound has a characteristic frequency footprint. So, it&apos;s very convinient to extract the features of the sound in the frequency domain.

### Mel Frequency Cepstral Co-efficients (MFCC)

Quoting from &lt;a href=&quot;https://iq.opengenus.org/mfcc-audio/&quot;&gt;https://iq.opengenus.org/mfcc-audio/&lt;/a&gt;:

&gt; MFC is a representation of the short-term power spectrum of a sound, based on a linear cosine transform of a log power spectrum on a nonlinear mel scale of frequency.

Ok, what does it mean? It&apos;s an improved frequency representation but applying optimizations based on the characteristics of human hearing. Usually MFCC are obtained like this:

1. Take the Fourier transform of the audio signal to get the frequency representation.
2. Map the powers of the spectrum to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mel_scale&quot;&gt;mel scale&lt;/a&gt;. This scale approximates the spectrum to be more like what humans hear.
3. Take the logs of the powers at each of the mel frequencies.
4. Take the discrete cosine transform (DCT) of the list of mel log powers. This will remove redudant information as in non-changing information.
5. The MFCCs are the amplitudes of the resulting spectrum.

&lt;table class=&quot;image-table&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img src=&quot;/assets/img/posts/bark-detector/mfcc.png&quot; alt=&quot;MFCC&quot;/&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;
&lt;small&gt;MFCC representation of an audio signal&lt;/small&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

We can use &lt;a href=&quot;https://librosa.org/doc/latest/index.html&quot;&gt;librosa&lt;/a&gt; library to load the audio and extract the MFCC features.

The x axis is time, the y axis is the different MFCC coefficients computed (20 in this example). The color shows the value MFCC coefficient for certain time and coefficient.

It&apos;s not obvious to see anything in this plot, but it represents the frequency information in a format the computer can use to understand the characteristics of this sound.

## Getting the dataset

In &lt;a href=&quot;https://www.agalera.eu/standalone-app-raspberry-pi&quot;&gt;this&lt;/a&gt; article I describe the little device I made to feed my dog while I&apos;m away. So I&apos;ll re-use the same device and plug it an old unused webcam that has a microphone.

I did not want to complicate my life much and I created a simple script that uses vlc to stream the audio obtained by the webcam mic and store it as mp3. In order to analyse the files easier I run the script every minute so I have recordings of 60 seconds duration:

```bash
#!/bin/bash
TIMEOUT=60
FILE_NAME=&quot;/home/pi/dogfeeder-audios/dogfeeder-audio-$(date +&apos;%Y_%m_%d_%H_%M_%S&apos;).mp3&quot;
timeout &quot;$TIMEOUT&quot; cvlc --no-video alsa://plughw:1 --sout=&quot;#transcode{vcodec=none,acodec=mp3,ab=128,
channels=2,samplerate=44100}:duplicate{dst=std{access=http,mux=mp3,dst=:8087},dst=std{access=file,mux=wav,
dst=$FILE_NAME}}&quot; &amp;
```

The syntax of vlc is really ugly :( . But if you read it carefully, you will see that we&apos;re telling vlc to transcode the audio coming from `alsa://plughw:1` device (webcam microphone) to mp3 at 128 kbps (decent compression rate). After that, stream the generated mp3 via HTTP on port 8087 and store the mp3 data on the given filename.

In order to don&apos;t flood the SD card of the Raspberry Pi I run the following script each 15 minutes. It gets the files older than 15 minutes, copy them to a NAS and remove them from the Raspberry Pi disk.

```bash
#!/bin/bash
MINUTES_ALLOWED=15
FILES_TO_DELETE=$(find /home/pi/dogfeeder-audios -type f -mmin +&quot;$MINUTES_ALLOWED&quot; -exec ls {} +)

for file in $FILES_TO_DELETE; do
    scp &quot;$file&quot; admin@diskstation.local:/volume1/data/dogfeeder-audios/.
    rm &quot;$file&quot;
done
```

## Training the model

I&apos;ve been recording for 3 days and we made some exits to keep him alone. Up to this point we have enough data to train the model. However, we have `60 min * 24 h * 3 days = 4320 files` and need to classify them manually. Will we do that manually? Absolutely not!

We can pre-process the dataset and check for files that have something different than noise.

&lt;table class=&quot;image-table&quot;&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;/assets/img/posts/bark-detector/noise.png&quot; alt=&quot;Signal wit noise&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;/assets/img/posts/bark-detector/wave.png&quot; alt=&quot;Signal wit unclassified audio event&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;&lt;small&gt;File with only noise&lt;/small&gt;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&lt;small&gt;File with unclassified audio event&lt;/small&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

Since my dog&apos;s barks are quite loud we can safely discard all files whose maximum amplitude is lower than 0.25. This way, we could reduce a lot the amount of files that need to be manually classified as bark.

### Characterization of a bark

As mentioned before, we&apos;ll discard files whose amplitude is lower than 0.25. Listening to multiple files with bark, we can observe that each bark more or less lasts for 1 second.

&lt;table class=&quot;image-table&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img src=&quot;/assets/img/posts/bark-detector/bark.png&quot; alt=&quot;Bark signal/&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;
&lt;audio controls&gt;
    &lt;source src=&quot;/assets/sounds/posts/bark-detector/bark.wav&quot; type=&quot;audio/wav&quot;/&gt;
&lt;/audio&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;
&lt;small&gt;Time representation of an audio signal containing a bark&lt;/small&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

### Labelling the dataset

So, the strategy for labelling the dataset will be:

1. Download the whole dataset.
2. Discard the not interesting files (files without any sound event) by checking the maximum amplitude.
3. Extract chunks of 1 seconds from them, run again the algorithm to check sound events on the one-second chunks.
4. Manually listen to the chunks and classify them as bark or not. You can default the labelling to &quot;Not Bark&quot; and this way you only classify events that are barks.

The implementation of this is quite simple: write every chunk filename in a CSV and and a 0 or 1 signaling the presence of a bark or not:

```
chunks/dogfeeder-audio-2021_07_16_18_49_01_23.wav,0
chunks/dogfeeder-audio-2021_07_16_18_49_01_24.wav,1
chunks/dogfeeder-audio-2021_07_16_18_49_01_25.wav,0
```

Once we have the dataset labelled, we can go file by file and extract the MFCC features of every one-second file:

```python
def extract_mfcc(filename):
    y, __ = librosa.load(filename, mono=True, sr=sample_rate)
    mfcc_2D = librosa.feature.mfcc(y, sr=sample_rate, n_mfcc=100)
    mfcc_1D = mfcc_2D.flatten()
    scaler = MinMaxScaler()
    mfccs_sc = scaler.fit_transform(np.array(mfcc_1D).reshape(-1, 1))
    return mfccs_sc.flatten()
```

MFCC values can go from [-Inf, Inf], however when I was playing with different algorithms, some of them did not accept negative values, so I scaled the values of MFCC to [0, Inf] using `MinMaxScaler`.

Once we have the MFCC features for all the dataset, we can split the dataset into training and test dataset using:

```python
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
        X, Y, random_state=42, test_size=0.33)
```

After that, I&apos;ve assesed the prediction performance of `Naive Bayes` classifier and `Logistic Regression` classifiers:

```python
    # Naive bayes
    print(&quot;Training naive bayes ...&quot;)
    mnb = MultinomialNB().fit(X_train, y_train)
    print(&quot;score on test: &quot; + str(mnb.score(X_test, y_test)))
    print(&quot;score on train: &quot; + str(mnb.score(X_train, y_train)))
    print(&quot;***************&quot;)

    # Logistic regression
    print(&quot;Training logistic regression ...&quot;)
    lr = LogisticRegression(max_iter=1000)
    lr.fit(X_train, y_train)
    print(&quot;score on test: &quot; + str(lr.score(X_test, y_test)))
    print(&quot;score on train: &quot; + str(lr.score(X_train, y_train)))
```

Getting a very good score with the logistic regression, I don&apos;t remember exactly the numbers but were more or less:

- Score on test: 0.992
- Score on traing: 0.996

### Dataset imbalance

The number of events with barks will be very reduced compared with the events that does not contain a bark. This can present a huge problem depending on the machine learning algorithm returning a totally biased model.

In order to fix that, you can do two things:

1. Oversample: create positive samples by synthetically creating new positive samples
2. Undersample: discard samples from the negative ones

More info: &lt;a href=&quot;https://towardsdatascience.com/having-an-imbalanced-dataset-here-is-how-you-can-solve-it-1640568947eb&quot;&gt;https://towardsdatascience.com/having-an-imbalanced-dataset-here-is-how-you-can-solve-it-1640568947eb&lt;/a&gt;

I&apos;ve used `SMOTE` (Synthetic Minority Over-sampling Technique) technique to perform the oversampling with very satisfactory results. In simple terms, SMOTE looks at the feature space for the minority class data points and considers its k nearest neighbours. 

To do that I&apos;ve used &lt;a href=&quot;https://imbalanced-learn.org/stable/&quot;&gt;imbalanced-learn&lt;/a&gt; python libary and it&apos;s really simple:

```python
def fix_imbalance(X, Y):
    over = SMOTE(sampling_strategy=0.1)
    under = RandomUnderSampler(sampling_strategy=0.5)
    steps = [(&apos;o&apos;, over), (&apos;u&apos;, under)]
    pipeline = Pipeline(steps=steps)
    X_fix, Y_fix = pipeline.fit_resample(X, Y)
    return X_fix, Y_fix
```

Note that the library also provides a module to perform majority under sampling. The two methods are combined in a pipeline to fix the dataset imbalance problem.

## Using the training model

Now we have our logistic regression model trained and is working quite well. It&apos;s time to put it on the Raspberry Pi.

First of all, we need a way to export the model outside of the training python code. In order to do that, I use the &lt;a href=&quot;https://joblib.readthedocs.io/en/latest/&quot;&gt;joblib&lt;/a&gt; library:

```python
# Write the model
lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)
joblib.dump(lr, &apos;lr.pkl&apos;, compress=9)
```

joblib serialize the object into that file and then Raspberry Pi can load the model object:

```python
model = joblib.load(&apos;lr.pkl&apos;)
```

Now we can retrieve the more recent fully recorded audio file:

```python
def last_fully_written_file():
    return audios_path + &quot;/&quot; + sorted(os.listdir(audios_path))[-2]
```
If the script query the last file, it might happen that is not fully written by that time.


Split it into chunks of one second and for each chunk run the prediction:

```python
def has_bark_in_minute(filename):
    model = joblib.load(&apos;lr.pkl&apos;)

    audio_data, __ = load_audio_from_file(filename)
    chunks = split_in_one_second_chunks(audio_data, sample_rate)
    chunk_predictions = []
    for chunk in chunks:
        if len(chunk) == sample_rate:
            mfccs = extract_mfcc(chunk)
            chunk_predictions.append(model.predict(np.array([mfccs]))[0])

    return chunk_predictions.count(1) &gt; 2, chunk_predictions
```

Since the model is probabilistic, it might happen to have false positive or negatives. In order to avoid that, the function `has_bark_in_minute` will only return `True` when more than two barks are detected for one minute.

Last but not least, when a bark is detected, the script will send me a message over telegram:

```python
def send_to_telegram(predictions, filename):
    date = filename.split(&quot;-&quot;)[-1].split(&quot;.mp3&quot;)[0]

    welcome_msg = f&quot;Detected {predictions.count(1)} barks on {date}&quot;

    response = requests.post(
        f&quot;https://api.telegram.org/bot{get_token()}/sendMessage&quot;,
        data={&quot;chat_id&quot;: telegram_group_id, &quot;text&quot;: welcome_msg},
    )
    print(response.text)
```

&lt;table class=&quot;image-table&quot;&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;/assets/img/posts/bark-detector/telegram.png&quot; alt=&quot;Telegram message when a bark occurs&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;center&quot;&gt;&lt;small&gt;Example of messages in Telegram&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</content><author><name></name></author><category term="python" /><category term="ml" /><category term="audio" /><category term="raspberry-pi" /><category term="bash" /><category term="python" /><category term="ml" /><category term="audio" /><category term="scikit" /><category term="librosa" /><category term="raspberry-pi" /><category term="vlc" /><category term="bash" /><summary type="html">My dog has a little bit of separation anxiety so when we leave him alone, he barks some times. We are training him to be home-alone and we want to know if he barks or not when we are not home. Let&apos;s implement a bark detector!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/bark-detector/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/bark-detector/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Java 11 negative symbol in Swedish</title><link href="https://www.agalera.eu/java11-negative-symbol-swedish/" rel="alternate" type="text/html" title="Java 11 negative symbol in Swedish" /><published>2021-05-06T00:00:00+02:00</published><updated>2021-05-06T00:00:00+02:00</updated><id>https://www.agalera.eu/java11-negative-symbol-swedish</id><content type="html" xml:base="https://www.agalera.eu/java11-negative-symbol-swedish/">We performed a migration to Java 11 and a bug fix about negative symbol for negative numbers in Java ruined our implementation. This article describes the situation and the lessons learned.

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

In the middle of a migration of a project to Java 11 a very curious scenario has appeared. We face a bug while dealing with negative numbers. We have a function to convert a positive number to negative. The implementation was working fine for Java 8 but not for Java 11:

```java
public String negativeNumber(int number) {
    return &quot;-&quot; + number;
}
```

The error appeared while trying to parse the numbers generated with that function:

```java
public Number parse(String number) throws ParseException {
    return fmt.parse(number)
}
```

More precisely, it was throwing the following exception:

```
Unparseable number: &quot;-1&quot;
java.text.ParseException: Unparseable number: &quot;-1&quot;
	at java.base/java.text.NumberFormat.parse(NumberFormat.java:431)
	at SwedishNegativeSymbol.shouldParseNegativeNumberButFailsOnJava11(SwedishNegativeSymbol.java:23)
```

The investigation and debug led us to compare our negative symbol with the one expected by the `NumberFormat`:

```java
@Test
public void shouldUseSameNegativeSymbol() {
    String expectedNegativeSymbol = fmt.getNegativePrefix();
    String negativeSymbol = negate(1).substring(0, 1);
    assertEquals(&quot;Negative symbols do not match!&quot;, expectedNegativeSymbol, negativeSymbol);
}
```

And... surprise, the test pass on Java 8 but not in Java 11:

```
Negative symbols do not match! expected:&lt;[â]&gt; but was:&lt;[-]&gt;
Expected :â
Actual   :-

org.junit.ComparisonFailure: Negative symbols do not match! expected:&lt;[â]&gt; but was:&lt;[-]&gt;
	at org.junit.Assert.assertEquals(Assert.java:115)
	at SwedishNegativeSymbol.shouldUseSameNegativeSymbol(SwedishNegativeSymbol.java:35)
```

&lt;b&gt;WTF!&lt;/b&gt;. Why on earth the negative symbol do not match? The response is here: &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8214926&quot;&gt;JDK-8214926&lt;/a&gt;. 

It looks like the negative symbol returned in Java 8 was wrong and Java authors decided to fix that in Java11. The two characters are visually very similar:

- &amp;#8722; &lt;a href=&quot;https://unicode-table.com/en/2212/&quot;&gt;Minus-sign&lt;/a&gt;
- &amp;#45; &lt;a href=&quot;https://unicode-table.com/en/002D/&quot;&gt;Hyphen-minus&lt;/a&gt;

The solution was straightforward: use the negative symbol provided by NumberFormat

```java
public String negativeNumberWorkingOnJava11(int number) {
    DecimalFormat fmt = (DecimalFormat) NumberFormat.getInstance(Locale.forLanguageTag(&quot;se-sv&quot;));
    return fmt.getNegativePrefix() + number;
}
```

Now the test passes both in Java 8 and Java 11. 

The lesson learned was important: &lt;b&gt;DO NOT HARDCODE NEGATIVE SYMBOL!&lt;/b&gt;

You can find the source code here: &lt;a href=&quot;https://github.com/adriangalera/java-sandbox/blob/master/src/test/java/SwedishNegativeSymbol.java&quot;&gt;SwedishNegativeSymbol.java&lt;/a&gt;</content><author><name></name></author><category term="java" /><category term="testing" /><category term="java" /><category term="java11" /><summary type="html">We performed a migration to Java 11 and a bug fix about negative symbol for negative numbers in Java ruined our implementation. This article describes the situation and the lessons learned.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/java11-negative-sv/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/java11-negative-sv/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Testing python BaseHttpServer</title><link href="https://www.agalera.eu/testing-python-base-http-server/" rel="alternate" type="text/html" title="Testing python BaseHttpServer" /><published>2021-02-18T00:00:00+01:00</published><updated>2021-02-18T00:00:00+01:00</updated><id>https://www.agalera.eu/testing-python-base-http-server</id><content type="html" xml:base="https://www.agalera.eu/testing-python-base-http-server/">&lt;p&gt;While the development of &lt;a href=&quot;https://www.agalera.eu/standalone-app-raspberry-pi&quot;&gt;https://www.agalera.eu/standalone-app-raspberry-pi/&lt;/a&gt; I needed to use python&apos;s BaseHttpServer and inject some dependencies into it.&lt;/p&gt;

&lt;p&gt;It turns out, there&apos;s no easy way of doing that. Moreover, I wanted to achieve 100% code coverage testing, so I should found a way of testing that code.&lt;/p&gt;

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

Here&apos;s the code I need to test:

```python
import socketserver
from http import server


class DogFeederServer(server.BaseHTTPRequestHandler):
    def __init__(self, camera_output, call_dog, servo, *args, **kwargs):
        self.camera_output = camera_output
        self.call_dog = call_dog
        self.servo = servo
        # BaseHTTPRequestHandler calls do_GET **inside** __init__ !!!
        # So we have to call super().__init__ after setting attributes.
        super().__init__(*args, **kwargs)

    def do_GET(self):
        if self.path == &quot;/stream.mjpg&quot;:
            self.send_response(200)
            # do some magic with HTTP Streaming
        else:
            self.send_error(404)
        self.end_headers()

    def do_POST(self):
        if self.path == &quot;/api/call&quot;:
            if self.call_dog():
                self.send_response(200)
            else:
                self.send_response(500)
        elif self.path == &quot;/api/treat&quot;:
            self.servo.open_and_close()
            self.send_response(200)
        else:
            self.send_error(404)
        self.end_headers()


class StreamingServer(socketserver.ThreadingMixIn, server.HTTPServer):
    allow_reuse_address = True
    daemon_threads = True

```
As you can see, the code is really simple.

The problem comes when you realise there are no easy way of calling the constructor of the server and pass the dependencies

## Passing dependencies on the constructor

Hopefully I discovered this StackOverflow post where someone has experience the same issue: &lt;a href=&quot;https://stackoverflow.com/questions/21631799/how-can-i-pass-parameters-to-a-requesthandler&quot;&gt;https://stackoverflow.com/questions/21631799/how-can-i-pass-parameters-to-a-requesthandler&lt;/a&gt;

I really like the approach of the &quot;partial&quot; application: we pass the arguments before and once the app is created with the arguments, is passed to the server:

```python
address = (&quot;&quot;, 8000)
handler = partial(
    DogFeederServer,
    camera_output,
    call_dog,
    servo,
)
server = StreamingServer(address, handler)
server.serve_forever()
```

Once we have the &quot;partial&quot; approach, we could easily provide mocks for the dependencies in the tests

## Test the server

The only way of testing the base HTTP server I found is to create some sort of &quot;integration testing&quot;: provide mocks to the server but actually start the HTTP server. To test the whole logic, we could use `requests` library to do the HTTP calls:

```python
import socket
from functools import partial
from threading import Thread
from unittest import TestCase
from unittest.mock import MagicMock

import requests

from dogfeeder.server import DogFeederServer, StreamingServer


class ServerTest(TestCase):
    def setUp(self):
        super(ServerTest, self).setUp()
        self.get_free_port()
        self.camera_output_mock = MagicMock()
        self.call_dog_mock = MagicMock()
        self.servo_mock = MagicMock()
        address = (&quot;&quot;, self.mock_server_port)
        handler = partial(
            DogFeederServer,
            self.camera_output_mock,
            self.call_dog_mock,
            self.servo_mock,
        )
        self.mock_server = StreamingServer(address, handler)

        # Start running mock server in a separate thread.
        # Daemon threads automatically shut down when the main process exits.
        self.mock_server_thread = Thread(target=self.mock_server.serve_forever)
        self.mock_server_thread.setDaemon(True)
        self.mock_server_thread.start()

    def test_servo_open_close(self):
        url = f&quot;http://localhost:{self.mock_server_port}/api/treat&quot;
        response = requests.post(url)
        self.servo_mock.open_and_close.assert_called_once()
        assert response.status_code == 200


    def test_invalid_path(self):
        url = f&quot;http://localhost:{self.mock_server_port}/unknown&quot;
        response = requests.post(url)
        assert response.status_code == 404
        response = requests.get(url)
        assert response.status_code == 404

    def tearDown(self):
        super(ServerTest, self).tearDown()

    def get_free_port(self):
        s = socket.socket(socket.AF_INET, type=socket.SOCK_STREAM)
        s.bind((&quot;localhost&quot;, 0))
        __, port = s.getsockname()
        s.close()
        self.mock_server_port = port
```

The key here is to start a daemon thread (that will die when the test ends) to start the HTTP server</content><author><name></name></author><category term="python" /><category term="testing" /><category term="python" /><category term="testing" /><category term="mocking" /><summary type="html">While the development of https://www.agalera.eu/standalone-app-raspberry-pi/ I needed to use python&apos;s BaseHttpServer and inject some dependencies into it. It turns out, there&apos;s no easy way of doing that. Moreover, I wanted to achieve 100% code coverage testing, so I should found a way of testing that code.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/test-python-basehttpserver/featured-image.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/test-python-basehttpserver/featured-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>